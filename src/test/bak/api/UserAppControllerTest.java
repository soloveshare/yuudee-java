package com.dkd.api;import com.dkd.XiaoyudiApplication;import com.dkd.common.utils.TokenProccessor;import com.dkd.model.XydPhoneQcellcore;import com.dkd.service.XydPhoneQcellcoreService;import net.sf.json.JSONObject;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.http.HttpMethod;import org.springframework.mock.web.MockHttpSession;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import javax.annotation.Resource;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class,properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class UserAppControllerTest {    private final Logger logger = LoggerFactory.getLogger(UserAppControllerTest.class);    private MockMvc mockMvc;    private MockHttpSession mockHttpSession;    @Autowired    private UserAppController userAppController;    @Autowired    private XydPhoneQcellcoreService xydPhoneQcellcoreService;    @Resource    private RedisTemplate redisTemplate;    private String reqUrl = "/app/user";    private  String token;    private  String token2;    private  String token3;    private  String mobile="15848456185";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(userAppController).build();        this.mockHttpSession = new MockHttpSession();        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/generalLogin")                        .param("phone",mobile)                        .param("password","123456")                        .param("qcellcoreId","1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====generalLogin result :" + result);        JSONObject jsonObject = JSONObject.fromObject(result);        String  tokenJson =  jsonObject.optString("data");        String parents =  JSONObject.fromObject(tokenJson).optString("parents");        token =  JSONObject.fromObject(parents).optString("token");        logger.error("=====generalLogin result token:" + token);        ResultActions perform = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/generalLogin")                        .param("phone", "15848959788")                        .param("password", "123456")                        .param("qcellcoreId", "1")                );        JSONObject jsonObject2 = JSONObject.fromObject(perform.andReturn().getResponse().getContentAsString());        String  tokenJson2 =  jsonObject2.optString("data");        String parents2 =  JSONObject.fromObject(tokenJson2).optString("parents");        token2 =  JSONObject.fromObject(parents2).optString("token");    }    @Test    public void testResd() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/testRedis")                        .param("mxg","token")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====getNounDayInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====getNounDayInfo result:" + result);    }   @Test    public void phoneIsRegister() throws Exception {        ResultActions resultActions = this.mockMvc.perform(                MockMvcRequestBuilders.post(reqUrl + "/phoneIsRegister")                .param("phone", "18613376684")                .param("password", "123456")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====phoneIsRegister mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====phoneIsRegister result:" + result);    }    @Test    public void phoneIsRegister1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(                MockMvcRequestBuilders.post(reqUrl + "/phoneIsRegister")                        .param("phone", "18613376684")                        .param("password", "123456")                        .param("districeId", "0"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====phoneIsRegister1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====phoneIsRegister1 result:" + result);    }    @Test    public void phoneIsRegister2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(                MockMvcRequestBuilders.post(reqUrl + "/phoneIsRegister")                        .param("phone", "")                        .param("password", "123456")                        .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====phoneIsRegister2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====phoneIsRegister2 result:" + result);    }    @Test    public void phoneIsRegister4() throws Exception {        ResultActions resultActions = this.mockMvc.perform(                MockMvcRequestBuilders.post(reqUrl + "/phoneIsRegister")                        .param("phone", "18614369666")                        .param("password", "123456")                        .param("districeId", "86"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====phoneIsRegister4 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====phoneIsRegister4 result:" + result);    }    @Test    public void phoneIsRegister6() throws Exception {        ResultActions resultActions = this.mockMvc.perform(                MockMvcRequestBuilders.post(reqUrl + "/phoneIsRegister")                        .param("phone", "185646566")                        .param("password", "123456")                        .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====phoneIsRegister6 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====phoneIsRegister6 result:" + result);    }    @Test    public void phoneIsRegister3() throws Exception {        ResultActions resultActions = this.mockMvc.perform(                MockMvcRequestBuilders.post(reqUrl + "/phoneIsRegister")                        .param("phone", "18613376666")                        .param("password", "123456")                        .param("districeId", "2"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====phoneIsRegister3 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====phoneIsRegister3 result:" + result);    }    @Test    public void phoneIsRegister5() throws Exception {        ResultActions resultActions = this.mockMvc.perform(                MockMvcRequestBuilders.post(reqUrl + "/phoneIsRegister")                        .param("phone", "18564656666")                        .param("password", "123456")                        .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====phoneIsRegister5 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====phoneIsRegister5 result:" + result);    }    @Test    public void updateChildInfo1() throws Exception {        ResultActions resultActions1 = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/generalLogin")                        .param("phone","18254664666")                        .param("password","123456")                        .param("qcellcoreId","1")                );        MvcResult mvcResult1 = resultActions1.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult1.getResponse().getStatus());        String result1 = mvcResult1.getResponse().getContentAsString();        logger.error("=====generalLogin result :" + result1);        JSONObject jsonObject = JSONObject.fromObject(result1);        String  tokenJson =  jsonObject.optString("data");        String parents =  JSONObject.fromObject(tokenJson).optString("parents");        String tokenupdateChildInfo1 =  JSONObject.fromObject(parents).optString("token");        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updateChildInfo")                .param("token", tokenupdateChildInfo1)                .param("name", "123456")                .param("photo", "http://yuudee.oss-cn-beijing.aliyuncs.com/9df190d1c3b246dda1c0becaf443b991.png"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updateChildInfo1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updateChildInfo1 result:" + result);    }    @Test    public void updateChildInfo2() throws Exception {        ResultActions resultActions2 = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/generalLogin")                        .param("phone","13552515719")                        .param("password","123456")                        .param("qcellcoreId","1")                );        MvcResult mvcResult2 = resultActions2.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult2.getResponse().getStatus());        String result2 = mvcResult2.getResponse().getContentAsString();        logger.error("=====generalLogin result :" + result2);        JSONObject jsonObject2 = JSONObject.fromObject(result2);        String  tokenJson2 =  jsonObject2.optString("data");        String parents2 =  JSONObject.fromObject(tokenJson2).optString("parents");        String token1updateChildInfo2 =  JSONObject.fromObject(parents2).optString("token");        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updateChildInfo")                .param("token", token1updateChildInfo2)                .param("name", "123456")                .param("photo", "http://yuudee.oss-cn-beijing.aliyuncs.com/9df190d1c3b246dda1c0becaf443b991.png"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updateChildInfo2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updateChildInfo2 result:" + result);    }    @Test    public void addChild() throws Exception {        ResultActions resultActions1 = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/generalLogin")                        .param("phone","15848959859")                        .param("password","123456")                        .param("qcellcoreId","1")                );        MvcResult mvcResult1 = resultActions1.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult1.getResponse().getStatus());        String result1 = mvcResult1.getResponse().getContentAsString();        logger.error("=====generalLogin result :" + result1);        JSONObject jsonObject = JSONObject.fromObject(result1);        String  tokenJson =  jsonObject.optString("data");        String parents =  JSONObject.fromObject(tokenJson).optString("parents");        String token =  JSONObject.fromObject(parents).optString("token");        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/perfection/addChild")                .param("token", token)                .param("provinceId", "1")                .param("countiyId", "1")                .param("cityId", "1")                .param("name", "name")                .param("birthdate", "2019-04-28")                .param("sex", "0")                .param("medical", "0")                .param("medicalState", "0")                .param("firstLanguage", "0")                .param("firstRests", "0")                .param("secondLanguage", "0")                .param("secondRests", "0")                .param("fatherCulture", "父亲")                .param("motherCulture", "母亲")                .param("trainingRests", "0")                .param("states", "1")                .param("trainingMethod", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====/perfection/addChild mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====/perfection/addChild result:" + result);    }    @Test    public void addChild22() throws Exception {        ResultActions resultActions2 = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/generalLogin")                        .param("phone","18230113588")                        .param("password","123456")                        .param("qcellcoreId","1")                );        MvcResult mvcResult2 = resultActions2.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult2.getResponse().getStatus());        String result2 = mvcResult2.getResponse().getContentAsString();        logger.error("=====generalLogin result :" + result2);        JSONObject jsonObject2 = JSONObject.fromObject(result2);        String  tokenJson2 =  jsonObject2.optString("data");        String parents2 =  JSONObject.fromObject(tokenJson2).optString("parents");        String addChild22 =  JSONObject.fromObject(parents2).optString("token");        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/perfection/addChild")                .param("token", addChild22)                .param("provinceId", "1")                .param("countiyId", "1")                .param("cityId", "1")                .param("name", "name")                .param("birthdate", "2019-04-28")                .param("sex", "0")                .param("medical", "0")                .param("medicalState", "0")                .param("firstLanguage", "0")                .param("firstRests", "0")                .param("secondLanguage", "0")                .param("secondRests", "0")                .param("fatherCulture", "父亲")                .param("motherCulture", "母亲")                .param("trainingRests", "0")                .param("states", "1")                .param("trainingMethod", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====/perfection/addChild mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====/perfection/addChild result:" + result);    }@Test    public void addChild223() throws Exception {        ResultActions resultActions2 = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/generalLogin")                        .param("phone","15848456185")                        .param("password","123456")                        .param("qcellcoreId","1")                );        MvcResult mvcResult2 = resultActions2.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult2.getResponse().getStatus());        String result2 = mvcResult2.getResponse().getContentAsString();        logger.error("=====generalLogin result :" + result2);        JSONObject jsonObject2 = JSONObject.fromObject(result2);        String  tokenJson2 =  jsonObject2.optString("data");        String parents2 =  JSONObject.fromObject(tokenJson2).optString("parents");        String addChild223 =  JSONObject.fromObject(parents2).optString("token");        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/perfection/addChild")                .param("token", addChild223)                .param("provinceId", "1")                .param("countiyId", "1")                .param("cityId", "1")                .param("name", "name")                .param("birthdate", "2019-04-28")                .param("sex", "0")                .param("medical", "0")                .param("medicalState", "0")                .param("firstLanguage", "0")                .param("firstRests", "0")                .param("secondLanguage", "0")                .param("secondRests", "0")                .param("fatherCulture", "父亲")                .param("motherCulture", "母亲")                .param("trainingRests", "0")                .param("states", "1")                .param("trainingMethod", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====/perfection/addChild mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====/perfection/addChild result:" + result);    }    @Test    public void addChild1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/perfection/addChild")                .param("token", "")                .param("provinceId", "1")                .param("countiyId", "1")                .param("countiyId", "1")                .param("name", "name")                .param("birthdate", "2019-04-28")                .param("sex", "0")                .param("medical", "0")                .param("medicalState", "0")                .param("firstLanguage", "0")                .param("firstRests", "0")                .param("secondLanguage", "0")                .param("secondRests", "0")                .param("fatherCulture", "父亲")                .param("motherCulture", "母亲")                .param("trainingRests", "0")        );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====/perfection/addChild mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====/perfection/addChild result:" + result);    }    @Test    public void addChild2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/perfection/addChild")                .param("token", "123123")                .param("provinceId", "1")                .param("countiyId", "1")                .param("countiyId", "1")                .param("name", "name")                .param("birthdate", "2019-04-28")                .param("sex", "0")                .param("medical", "0")                .param("medicalState", "0")                .param("firstLanguage", "0")                .param("firstRests", "0")                .param("secondLanguage", "0")                .param("secondRests", "0")                .param("fatherCulture", "父亲")                .param("motherCulture", "母亲")                .param("trainingRests", "0")        );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====/perfection/addChild mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====/perfection/addChild result:" + result);    }    @Test    public void registerSendCode() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerSendCode")                .param("phone", "17795591253")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerSendCode mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerSendCode result:" + result);    }    @Test    public void registerSendCode3() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerSendCode")                .param("phone", "17795591253")                .param("districeId", "88"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerSendCode3 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerSendCode3 result:" + result);    }    @Test    public void registerSendCode4() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerSendCode")                .param("phone", "177955912513")                .param("districeId", "88"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerSendCode4 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerSendCode4 result:" + result);    }    @Test    public void registerSendCode6() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerSendCode")                .param("phone", "177955912513")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerSendCode6 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerSendCode6 result:" + result);    }    @Test    public void registerSendCode7() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerSendCode")                .param("phone", "17795591253")                .param("districeId", "2"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerSendCode7 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerSendCode7 result:" + result);    }    @Test    public void registerSendCode2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerSendCode")                .param("phone", "17795591253")                .param("districeId", ""));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerSendCode2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerSendCode2 result:" + result);    }    @Test    public void registerSendCode1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerSendCode")                .param("phone", "")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerSendCode1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerSendCode1 result:" + result);    }    @Test    public void registerCodeverify() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerCodeverify")                .param("phone", "18811112222")                .param("code", "123456")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerCodeverify mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerCodeverify result:" + result);    }    @Test    public void registerCodeverify1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerCodeverify")                .param("phone", "")                .param("code", "123456")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerCodeverify1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerCodeverify1 result:" + result);    }    @Test    public void registerCodeverify2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerCodeverify")                .param("phone", "18811112222")                .param("code", "123456")                .param("districeId", "88"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerCodeverify2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerCodeverify2 result:" + result);    }    @Test    public void registerCodeverify3() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerCodeverify")                .param("phone", "18811112222")                .param("code", "")                .param("districeId", ""));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerCodeverify3 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerCodeverify3 result:" + result);    }    @Test    public void registerCodeverify4() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerCodeverify")                .param("phone", "188111122221")                .param("code", "")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerCodeverify4 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerCodeverify4 result:" + result);    }    @Test    public void registerCodeverify5() throws Exception {        String mobile ="177"+(int)((Math.random()*9+1)*10000000);        ResultActions perform = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerSendCode")                .param("phone", mobile)                .param("districeId", "1"));        TokenProccessor.getInstance().setRedisTemplate(redisTemplate);        XydPhoneQcellcore xydPhoneQcellcore = xydPhoneQcellcoreService.selectByPrimaryKey(1);        String valueByKeyTheRedis = (String) TokenProccessor.getInstance().getValueByKeyTheRedis(xydPhoneQcellcore.getPhonePrefix()+mobile);        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerCodeverify")                .param("phone", mobile)                .param("code", valueByKeyTheRedis)                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerCodeverify mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerCodeverif®y result:" + result);    }    @Test    public void registerCodeverify6() throws Exception {        String mobile ="177"+ (int)((Math.random()*9+1)*10000000);        ResultActions perform = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerSendCode")                .param("phone", mobile)                .param("districeId", "1"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerCodeverify")                .param("phone", mobile)                .param("code", "123456")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerCodeverify6 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerCodeverify6 result:" + result);    }    @Test    public void registerCodeverify7() throws Exception {        String mobile ="177"+ (int)((Math.random()*9+1)*10000000);        ResultActions perform = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerSendCode")                .param("phone", mobile)                .param("districeId", "1"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerCodeverify")                .param("phone", mobile)                .param("code", "")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====registerCodeverify6 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====registerCodeverify6 result:" + result);    }   @Test    public void userRegister() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/register")                .param("phone", "17795591253")                .param("password", "123456")                .param("qcellcoreId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====generalLogin result:" + result);    }    @Test    public void userRegister11() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/register")                .param("phone", "13601145545")                .param("password", "123456")                .param("qcellcoreId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====generalLogin result:" + result);    }    @Test    public void userRegister1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/register")                .param("phone", "")                .param("password", "")                .param("qcellcoreId", ""));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====generalLogin result:" + result);    }    @Test    public void userRegister2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/register")                .param("phone", "1111111111111")                .param("password", "22")                .param("qcellcoreId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====generalLogin result:" + result);    }    @Test    public void userRegister3() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/register")                .param("phone", "1111111111111")                .param("password", "111")                .param("qcellcoreId", "8888"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====generalLogin result:" + result);    }   @Test    public void generalLogin() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/generalLogin")                        .param("phone","17795591253")                        .param("password","123456")                        .param("qcellcoreId","1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====generalLogin result :" + result);        JSONObject jsonObject = JSONObject.fromObject(result);        String  tokenJson =  jsonObject.optString("data");        String parents =  JSONObject.fromObject(tokenJson).optString("parents");        token =  JSONObject.fromObject(parents).optString("token");        logger.error("=====generalLogin result token:" + token);    }    @Test    public void generalLogin1() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/generalLogin")                        .param("phone","")                        .param("password","123456")                        .param("qcellcoreId","1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====generalLogin result :" + result);    }    @Test    public void generalLogin2() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/generalLogin")                        .param("phone","17795591253")                        .param("password","1234561")                        .param("qcellcoreId","1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====generalLogin result :" + result);    }    @Test    public void generalLogin3() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/generalLogin")                        .param("phone","15795591253")                        .param("password","1234561")                        .param("qcellcoreId","1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====generalLogin result :" + result);    }    @Test    public void shortcutLoginSendCode() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET, reqUrl + "/shortcutLoginSend")                        .param("phone", "17795591253")                        .param("qcellcoreId", "1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLoginSendCode mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLoginSendCode result:" + result);    }    @Test    public void shortcutLoginSendCode1() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET, reqUrl + "/shortcutLoginSend")                        .param("phone", "")                        .param("qcellcoreId", "1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLoginSendCode1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLoginSendCode1 result:" + result);    }    @Test    public void shortcutLoginSendCode2() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET, reqUrl + "/shortcutLoginSend")                        .param("phone", "17795591253")                        .param("qcellcoreId", "2")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLoginSendCode2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLoginSendCode2 result:" + result);    }    @Test    public void shortcutLoginSendCode4() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET, reqUrl + "/shortcutLoginSend")                        .param("phone", "17795591253")                        .param("qcellcoreId", "")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLoginSendCode4 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLoginSendCode4 result:" + result);    }    @Test    public void shortcutLoginSendCode3() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET, reqUrl + "/shortcutLoginSend")                        .param("phone", "177955912532222")                        .param("qcellcoreId", "2")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLoginSendCode3 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLoginSendCode3 result:" + result);    }    @Test    public void shortcutLoginSendCode5() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET, reqUrl + "/shortcutLoginSend")                        .param("phone", "15811337411")                        .param("qcellcoreId", "1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLoginSendCode5 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLoginSendCode5 result:" + result);    }    @Test    public void shortcutLoginSendCode6() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET, reqUrl + "/shortcutLoginSend")                        .param("phone", "15811337411")                        .param("qcellcoreId", "0")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLoginSendCode6 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLoginSendCode6 result:" + result);    }    @Test    public void shortcutLoginSendCode7() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET, reqUrl + "/shortcutLoginSend")                        .param("phone", "15811337411")                        .param("qcellcoreId", "88")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLoginSendCode7 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLoginSendCode7 result:" + result);    }    @Test    public void shortcutLoginSendCode8() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET, reqUrl + "/shortcutLoginSend")                        .param("phone", "158113374111111")                        .param("qcellcoreId", "1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLoginSendCode8 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLoginSendCode8 result:" + result);    }    @Test    public void image() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/verify/imageCode")                        .param("imageCode", "123455")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====image mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====image result:" + result);    }    @Test    public void image2() throws Exception{        mockHttpSession.setAttribute("verifyCode","1234556");        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/verify/imageCode")                        .session(mockHttpSession)                        .param("imageCode", "1234556")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====image mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====image result:" + result);    }    @Test    public void shortcutLogin() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/shortcutLogin")                        .param("phone", "16601145545")                        .param("code", "123456")                        .param("qcellcoreId", "1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLogin result:" + result);    }    @Test    public void shortcutLogin0() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/shortcutLogin")                        .param("phone", "16601215922")                        .param("code", "123456")                        .param("qcellcoreId", "1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLogin0 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLogin0 result:" + result);    }    @Test    public void shortcutLogin1() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/shortcutLogin")                        .param("phone", "")                        .param("code", "123456")                        .param("qcellcoreId", "1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLogin1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLogin1 result:" + result);    }    @Test    public void shortcutLogin2() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/shortcutLogin")                        .param("phone", "1")                        .param("code", "123456")                        .param("qcellcoreId", "")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLogin2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLogin2 result:" + result);    }    @Test    public void shortcutLogin3() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/shortcutLogin")                        .param("phone", "1")                        .param("code", "123456")                        .param("qcellcoreId", "0")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLogin3 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLogin3 result:" + result);    }    @Test    public void shortcutLogin4() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/shortcutLogin")                        .param("phone", "15848959797")                        .param("code", "123456")                        .param("qcellcoreId", "1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLogin4 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLogin4 result:" + result);    }    @Test    public void shortcutLogin5() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/shortcutLogin")                        .param("phone", "158489597971111")                        .param("code", "123456")                        .param("qcellcoreId", "1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLogin5 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLogin5 result:" + result);    } @Test    public void shortcutLogin6() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(reqUrl + "/shortcutLogin")                        .param("phone", "16601145546")                        .param("code", "123456")                        .param("qcellcoreId", "1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====shortcutLogin6 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====shortcutLogin6 result:" + result);    }    @Test    public void sendCode() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "18795591253")                .param("type", "1")                .param("qcellcoreId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode result:" + result);    }    @Test    public void sendCode1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "18795591253")                .param("type", "2")                .param("qcellcoreId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode1 result:" + result);    }    @Test    public void sendCode2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "18795591253")                .param("type", "3")                .param("qcellcoreId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode2 result:" + result);    }    @Test    public void sendCode3() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "18795591253")                .param("type", "4")                .param("qcellcoreId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode3 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode3 result:" + result);    }    @Test    public void sendCode4() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "")                .param("type", "")                .param("qcellcoreId", ""));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode4 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode4 result:" + result);    }    @Test    public void sendCode5() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "1")                .param("type", "4")                .param("qcellcoreId", "0"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode5 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode5 result:" + result);    }    @Test    public void sendCode61() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "188111111111")                .param("type", "1")                .param("qcellcoreId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode61 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode61 result:" + result);    }@Test    public void sendCode6() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "188111111111")                .param("type", "1")                .param("qcellcoreId", "2"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode6 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode6 result:" + result);    }    @Test    public void sendCode7() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "188111111111")                .param("type", "2")                .param("qcellcoreId", "2"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode7 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode7 result:" + result);    }    @Test    public void sendCode8() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "188111111111")                .param("type", "3")                .param("qcellcoreId", "2"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode8 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode8 result:" + result);    }    @Test    public void sendCode81() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "15045466665")                .param("type", "3")                .param("qcellcoreId", "2"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode81 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode81 result:" + result);    }    @Test    public void sendCode82() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "15045466665")                .param("type", "3")                .param("qcellcoreId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode82 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode82 result:" + result);    }    @Test    public void sendCode9() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "188111111111")                .param("type", "4")                .param("qcellcoreId", "2"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode9 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode9 result:" + result);    }    @Test    public void sendCode91() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", "15045466665")                .param("type", "4")                .param("qcellcoreId", "2"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====sendCode91 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====sendCode91 result:" + result);    }    @Test    public void resetPassword() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/resetPassword")                .param("phone", "17795591253")                .param("password", "123456"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====resetPassword mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====resetPassword result:" + result);    }    @Test    public void resetPassword1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/resetPassword")                .param("phone", "")                .param("password", "123456"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====resetPassword1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====resetPassword1 result:" + result);    } @Test    public void resetPassword2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/resetPassword")                .param("phone", "16601145546")                .param("password", "123456"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====resetPassword2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====resetPassword2 result:" + result);    }    @Test    public void resetPassword3() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/resetPassword")                .param("phone", "166011455461")                .param("password", "123456"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====resetPassword3 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====resetPassword3 result:" + result);    }    @Test    public void updatePassword() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePassword")                .param("token", "1")                .param("newPassword", "17795591253")                .param("oldPassword", "123456"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePassword mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePassword result:" + result);    }    @Test    public void updatePassword2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePassword")                .param("token", "")                .param("newPassword", "17795591253")                .param("oldPassword", "123456"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePassword2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePassword2 result:" + result);    }    @Test    public void updatePassword3() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePassword")                .param("token", "")                .param("newPassword", "")                .param("oldPassword", ""));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePassword2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePassword2 result:" + result);    }    @Test    public void updatePassword4() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePassword")                .param("token", token2)                .param("newPassword", "123456")                .param("oldPassword", "123456"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePassword2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePassword2 result:" + result);    }@Test    public void updatePassword5() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePassword")                .param("token", token)                .param("newPassword", "123456")                .param("oldPassword", "1234567"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePassword5 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePassword5 result:" + result);    }    @Test    public void updatePassword1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePassword").param("phone", "17795591253").param("password", "123456").param("qcellcoreId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePassword1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePassword1 result:" + result);    }    @Test    public void updateChildInfo() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updateChildInfo")                .param("token", token)                .param("name", "123456")                .param("photo", "http://yuudee.oss-cn-beijing.aliyuncs.com/9df190d1c3b246dda1c0becaf443b991.png"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updateChildInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updateChildInfo result:" + result);    }    @Test    public void updateChildInfo11() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updateChildInfo")                .param("token", "")                .param("name", "123456")                .param("photo", "http://yuudee.oss-cn-beijing.aliyuncs.com/9df190d1c3b246dda1c0becaf443b991.png"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updateChildInfo1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updateChildInfo1 result:" + result);    }    @Test    public void updatePhone() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePhone")                .param("phone", "17695591253")                .param("token", "token")                .param("code", "123456")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePhone mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePhone result:" + result);    }    @Test    public void updatePhone11() throws Exception {        String newPhone = "17895591253";        this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", newPhone)                .param("type", "4")                .param("qcellcoreId", "1"));        TokenProccessor.getInstance().setRedisTemplate(redisTemplate);        XydPhoneQcellcore xydPhoneQcellcore = xydPhoneQcellcoreService.selectByPrimaryKey(1);        String valueByKeyTheRedis = (String) TokenProccessor.getInstance().getValueByKeyTheRedis(xydPhoneQcellcore.getPhonePrefix()+newPhone);        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePhone")                .param("phone", newPhone)                .param("token", token)                .param("code", valueByKeyTheRedis)                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePhone11 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePhone11 result:" + result);    }    @Test    public void updatePhone111() throws Exception {        String newPhone = "17895591253";        this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/sendCode")                .param("phone", newPhone)                .param("type", "4")                .param("qcellcoreId", "1"));        TokenProccessor.getInstance().setRedisTemplate(redisTemplate);        XydPhoneQcellcore xydPhoneQcellcore = xydPhoneQcellcoreService.selectByPrimaryKey(1);        String valueByKeyTheRedis = (String) TokenProccessor.getInstance().getValueByKeyTheRedis(xydPhoneQcellcore.getPhonePrefix()+newPhone);        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePhone")                .param("phone", newPhone)                .param("token", token3)                .param("code", valueByKeyTheRedis)                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePhone111 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePhone111 result:" + result);    }    @Test    public void updatePhone1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePhone")                .param("phone", "17695591253")                .param("token", "")                .param("code", "123456")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePhone1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePhone1 result:" + result);    }    @Test    public void updatePhone2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePhone")                .param("phone", "")                .param("token", "token")                .param("code", "123456")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePhone2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePhone2 result:" + result);    }    @Test    public void updatePhone3() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePhone")                .param("phone", "")                .param("token", "token")                .param("code", "123456")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePhone3 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePhone3 result:" + result);    }    @Test    public void updatePhone4() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePhone")                .param("phone", "11111111111111")                .param("token", "token")                .param("code", "123456")                .param("districeId", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePhone4 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePhone4 result:" + result);    }    @Test    public void updatePhone5() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updatePhone")                .param("phone", "11111111111111")                .param("token", "token")                .param("code", "123456")                .param("districeId", "00"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====updatePhone5 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====updatePhone5 result:" + result);    }    @Test    public void efficacyCode() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/efficacyCode")                .param("phone", "17795591253")                .param("code", "123456")                .param("districeId", "2"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====efficacyCode mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====efficacyCode result:" + result);    }    @Test    public void efficacyCode3() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/efficacyCode")                .param("phone", "1779559125111113")                .param("code", "123456")                .param("districeId", "2"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====efficacyCode3 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====efficacyCode3 result:" + result);    }    @Test    public void efficacyCode1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/efficacyCode")                .param("phone", "")                .param("code", "")                .param("districeId", ""));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====efficacyCode1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====efficacyCode1 result:" + result);    }    @Test    public void efficacyCode2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/efficacyCode")                .param("phone", "18812345678")                .param("code", "1234")                .param("districeId", "88"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====efficacyCode2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====efficacyCode2 result:" + result);    }    @Test    public void efficacyCode4() throws Exception {        this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/registerSendCode")                .param("phone", "15511112222")                .param("districeId", "2"));        TokenProccessor.getInstance().setRedisTemplate(redisTemplate);        XydPhoneQcellcore xydPhoneQcellcore = xydPhoneQcellcoreService.selectByPrimaryKey(1);        String valueByKeyTheRedis = (String) TokenProccessor.getInstance().getValueByKeyTheRedis(xydPhoneQcellcore.getPhonePrefix()+mobile);        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/efficacyCode")                .param("phone", "15511112222")                .param("code", valueByKeyTheRedis)                .param("districeId", "2"));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====efficacyCode3 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====efficacyCode3 result:" + result);    }    @Test    public void getChilInfo() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getChilInfo")                .param("token", token));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====getChilInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====getChilInfo result:" + result);    }    @Test    public void getChilInfo2() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getChilInfo")                .param("token", token2));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====getChilInfo2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====getChilInfo2 result:" + result);    }    @Test    public void getChilInfo1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getChilInfo")                .param("token", ""));        MvcResult mvcResult = resultActions.andReturn();        logger.error("=====getChilInfo1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.error("=====getChilInfo1 result:" + result);    }}