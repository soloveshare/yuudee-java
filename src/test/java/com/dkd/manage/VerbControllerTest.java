package com.dkd.manage;import com.dkd.XiaoyudiApplication;import org.json.JSONObject;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class VerbControllerTest {    private final Logger logger = LoggerFactory.getLogger(VerbControllerTest.class);    private MockMvc mockMvc;    @Autowired    private VerbController verbController;    private String reqUrl = "/manage/verb";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(verbController).build();    }    @After    public void tearDown() throws Exception {    }    @Test    public void toVerbTrainingPage() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/toVerbTrainingPage"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toVerbTrainingPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toVerbTrainingPage result:" + result);    }    @Test    public void toVerbTestPage() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.get(reqUrl + "/toVerbTestPage"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toVerbTestPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toVerbTestPage result:" + result);    }    @Test    public void toAddVerbTraining() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/toAddVerbTraining").param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAddVerbTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAddVerbTraining result:" + result);    }    @Test    public void toAddVerbTest() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/toAddVerbTest").param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAddVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAddVerbTest result:" + result);    }    @Test    public void jiaoyan() throws Exception {        logger.info("=====jiaoyan test:" + verbController.jiaoyan(new ArrayList<>()));    }    @Test    public void getVerbTestList() throws Exception {        JSONObject jsonObject = new JSONObject();        jsonObject.put("start",1);        jsonObject.put("length",10);        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getVerbTestList")                .param("params", jsonObject.toString()));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getVerbTestList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getVerbTestList result:" + result);    }    @Test    public void addVerbTest() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/addVerbTest")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addVerbTest result:" + result);    }    @Test    public void deleteVerbTest() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/deleteVerbTest")                .param("id", "4"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteVerbTest result:" + result);    }    @Test    public void updateVerbTest() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updateVerbTest")                .param("id", "4")                .param("cardOneTime", "11")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateVerbTest result:" + result);    }    @Test    public void verbTestDetail() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/verbTestDetail").param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====verbTestDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====verbTestDetail result:" + result);    }    @Test    public void getVerbTrainingList() throws Exception {        JSONObject jsonObject = new JSONObject();        jsonObject.put("start",1);        jsonObject.put("length",10);        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getVerbTrainingList")                .param("params", jsonObject.toString()));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getVerbTrainingList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getVerbTrainingList result:" + result);    }    @Test    public void getHelpTime() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getHelpTime")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getHelpTime mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getHelpTime result:" + result);    }    @Test    public void addVerbTraining() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/addVerbTraining")                .param("verbType", "1")                .param("verbChar", "1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addVerbTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addVerbTraining result:" + result);    }    @Test    public void deleteVerbTraining() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/deleteVerbTraining").param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteVerbTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteVerbTraining result:" + result);    }    @Test    public void updateVerbTraining() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updateVerbTraining").param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateVerbTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateVerbTraining result:" + result);    }    @Test    public void verbTrainingDetail() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/verbTrainingDetail").param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====verbTrainingDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====verbTrainingDetail result:" + result);    }}