package com.dkd.manage;import com.dkd.XiaoyudiApplication;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(        classes = XiaoyudiApplication.class,        properties = "/application.properties")@AutoConfigureMockMvcpublic class WorkBenchControllerTest {    private final Logger logger = LoggerFactory.getLogger(WorkBenchControllerTest.class);    private String reqUrl = "/manage/workbench";    private MockMvc mockMvc;    @Autowired    private WorkBenchController workBenchController;    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(workBenchController).build();    }    @After    public void tearDown() throws Exception {    }    @Test    public void tostatisticsPage() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.get(reqUrl + "/tostatisticsPage"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====tostatisticsPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====tostatisticsPage result:" + result);    }      @Test      public void toWorkBenchPage() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/toWorkBenchPage")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toWorkBenchPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toWorkBenchPage result:" + result);      }         @Test      public void getWorkCount() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getWorkCount")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getWorkCount mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getWorkCount result:" + result);      }            @Test      public void toUserDetail() throws Exception {       ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.get(reqUrl + "/toUserDetail")               );       MvcResult mvcResult = resultActions.andReturn();       logger.info("=====toUserDetail mvcResult:" + mvcResult.getResponse().getStatus());       String result = mvcResult.getResponse().getContentAsString();       logger.info("=====toUserDetail result:" + result);      }     /*   @Test      public void getWorkSum() throws Exception {         ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getWorkSum")                 );         MvcResult mvcResult = resultActions.andReturn();         logger.info("=====getWorkSum mvcResult:" + mvcResult.getResponse().getStatus());         String result = mvcResult.getResponse().getContentAsString();         logger.info("=====getWorkSum result:" + result);      }           @Test      public void getWorkday() throws Exception {         ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getWorkday")                 );         MvcResult mvcResult = resultActions.andReturn();         logger.info("=====getWorkday mvcResult:" + mvcResult.getResponse().getStatus());         String result = mvcResult.getResponse().getContentAsString();         logger.info("=====getWorkday result:" + result);      }           @Test      public void getWorkResult() throws Exception {         ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getWorkResult")                 );         MvcResult mvcResult = resultActions.andReturn();         logger.info("=====getWorkResult mvcResult:" + mvcResult.getResponse().getStatus());         String result = mvcResult.getResponse().getContentAsString();         logger.info("=====getWorkResult result:" + result);      }    @Test    public void getWorkModule() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getWorkModule")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getWorkResult mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getWorkResult result:" + result);    }*/}