package com.dkd.manage;import com.dkd.XiaoyudiApplication;import com.dkd.model.XydNounTraining;import com.dkd.model.XydTrainingHelptime;import com.dkd.service.XydNounTrainingService;import com.dkd.service.XydTrainingHelpService;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.mock.web.MockMultipartFile;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import java.util.List;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class NounControllerTest {    private final Logger logger = LoggerFactory.getLogger(NounControllerTest.class);    private MockMvc mockMvc;    @Autowired    private NounController nounController;    @Autowired    private XydTrainingHelpService trainingHelpService;    @Autowired    private XydNounTrainingService nounTrainingService;    private String reqUrl = "/manage/noun";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(nounController).build();    }    @After    public void tearDown() throws Exception {    }    @Test    public void toNoumTrainingPage() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toNoumTrainingPage"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toNoumTrainingPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toNoumTrainingPage result:" + result);    }    @Test    public void toNoumTestPage() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toNoumTestPage"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toNoumTestPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toNoumTestPage result:" + result);    }    @Test    public void toNounSenseList() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toNounSensePage"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toNounSensePage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toNounSensePage result:" + result);    }    @Test    public void toAddNounTrainingPage() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toAddNounTrainingPage"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toAddNounTrainingPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toAddNounTrainingPage result:" + result);    }    @Test    public void toAddNounTestPage() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toAddNounTestPage"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toAddNounTestPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toAddNounTestPage result:" + result);    }    @Test    public void getImg() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getImg.html"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getImg mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getImg result:" + result);    }    @Test    public void toAddNounSensePage() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toAddNounSensePage")                        .param("id","19")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toAddNounSensePage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toAddNounSensePage result:" + result);    }    @Test    public void setHelpTimes() throws Exception{        ResultActions resultActions0 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/setHelpTimes")                        .param("states1","1")                        .param("states2","2")                        .param("states3","3")                        .param("states4","4")                );        MvcResult mvcResult0 = resultActions0.andReturn();        System.out.println("=====setHelpTimes mvcResult:" + mvcResult0.getResponse().getStatus());        String result0 = mvcResult0.getResponse().getContentAsString();        System.out.println("=====setHelpTimes result:" + result0);        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/setHelpTimes")                        .param("states2","1")                        .param("states1","5")                        .param("states3","2")                        .param("states4","3")                        .param("topicType","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====setHelpTimes mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====setHelpTimes result:" + result);        ResultActions resultActions1 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/setHelpTimes")                        .param("states2","1")                        .param("states1","1")                        .param("states3","2")                        .param("states4","3")                        .param("topicType","1")                );        MvcResult mvcResult1 = resultActions1.andReturn();        System.out.println("=====setHelpTimes mvcResult:" + mvcResult1.getResponse().getStatus());        String result1 = mvcResult1.getResponse().getContentAsString();        System.out.println("=====setHelpTimes result:" + result1);        ResultActions resultActions3 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/setHelpTimes")                        .param("states2","1")                        .param("states3","2")                        .param("states4","3")                        .param("topicType","1")                );        MvcResult mvcResult3 = resultActions3.andReturn();        System.out.println("=====setHelpTimes mvcResult:" + mvcResult3.getResponse().getStatus());        String result3 = mvcResult3.getResponse().getContentAsString();        System.out.println("=====setHelpTimes result:" + result3);        ResultActions resultActions4 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/setHelpTimes")                        .param("states2","1")                        .param("states1","1")                        .param("states3","2")                        .param("states4","3")                        .param("topicType","3")                );        MvcResult mvcResult4 = resultActions4.andReturn();        System.out.println("=====setHelpTimes mvcResult:" + mvcResult4.getResponse().getStatus());        String result4 = mvcResult4.getResponse().getContentAsString();        System.out.println("=====setHelpTimes result:" + result4);        XydTrainingHelptime trainingHelptime1 = new XydTrainingHelptime();        trainingHelptime1.setStates("1");        trainingHelptime1.setTopicType(4);        List<XydTrainingHelptime> xydTrainingHelptimes = trainingHelpService.selectByEntityList(trainingHelptime1);        for (XydTrainingHelptime xydTrainingHelptime:xydTrainingHelptimes){            xydTrainingHelptime.setHelpTime(1);            xydTrainingHelptime.setStates("1");            trainingHelpService.update(xydTrainingHelptime);        }        ResultActions resultActions5 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/setHelpTimes")                        .param("states2","1")                        .param("states1","2")                        .param("states3","2")                        .param("states4","3")                        .param("topicType","4")                );        MvcResult mvcResult5 = resultActions5.andReturn();        System.out.println("=====setHelpTimes mvcResult:" + mvcResult5.getResponse().getStatus());        String result5 = mvcResult5.getResponse().getContentAsString();        System.out.println("=====setHelpTimes result:" + result5);        List<XydTrainingHelptime> xydTrainingHelptimes1 = trainingHelpService.selectByEntityList(trainingHelptime1);        for (XydTrainingHelptime xydTrainingHelptime:xydTrainingHelptimes1){            xydTrainingHelptime.setHelpTime(1);            xydTrainingHelptime.setStates("2");            trainingHelpService.update(xydTrainingHelptime);        }        ResultActions resultActions6 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/setHelpTimes")                        .param("states2","1")                        .param("states1","2")                        .param("states3","2")                        .param("states4","3")                        .param("topicType","4")                );        MvcResult mvcResult6 = resultActions6.andReturn();        System.out.println("=====setHelpTimes mvcResult:" + mvcResult6.getResponse().getStatus());        String result6 = mvcResult6.getResponse().getContentAsString();        System.out.println("=====setHelpTimes result:" + result6);        /*XydTrainingHelptime trainingHelptime = new XydTrainingHelptime();        trainingHelptime.setSort(1);        trainingHelptime.setHelpTime(1);        trainingHelptime.setStates("1");        trainingHelptime.setTopicType(2);        List<XydTrainingHelptime> helptimes = trainingHelpService.selectByEntityList(trainingHelptime);        for (XydTrainingHelptime xydTrainingHelptime:helptimes){            xydTrainingHelptime.setSort(2);            trainingHelpService.update(xydTrainingHelptime);        }        ResultActions resultActions7 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/setHelpTimes")                        .param("states2","1")                        .param("states1","1")                        .param("states3","2")                        .param("states4","3")                        .param("topicType","2")                );        MvcResult mvcResult7 = resultActions7.andReturn();        System.out.println("=====setHelpTimes mvcResult:" + mvcResult7.getResponse().getStatus());        String result7 = mvcResult7.getResponse().getContentAsString();        System.out.println("=====setHelpTimes result:" + result7);*/    }    @Test    public void getNounTrainingList() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getNounTrainingList")                        .param("start","1")                        .param("length","10")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getNounTrainingList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getNounTrainingList result:" + result);        ResultActions resultActions2 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getNounTrainingList")                        .param("start","1")                        .param("length","10")                        .param("groupWord","1")                );        MvcResult mvcResult2 = resultActions2.andReturn();        System.out.println("=====getNounTrainingList mvcResult:" + mvcResult2.getResponse().getStatus());        String result2 = mvcResult2.getResponse().getContentAsString();        System.out.println("=====getNounTrainingList result:" + result2);    }    @Test    public void addNounTraining() throws Exception{        ResultActions resultActions0 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addNounTraining")                        .param("wireChar","11")                        .param("groupWord","111")                );        MvcResult mvcResult0 = resultActions0.andReturn();        System.out.println("=====addNounTraining mvcResult:" + mvcResult0.getResponse().getStatus());        String result0 = mvcResult0.getResponse().getContentAsString();        System.out.println("=====addNounTraining result:" + result0);        MockMultipartFile wireImage = new MockMultipartFile("wireImage", "1.jpeg", "image/jpeg", "some xml".getBytes());        MockMultipartFile wireRecord = new MockMultipartFile("wireRecord", "2.jpeg", "image/jpeg", "some other type".getBytes());        MockMultipartFile groupImage = new MockMultipartFile("groupImage", "3.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile colorPenRecord = new MockMultipartFile("colorPenRecord", "4.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile groupRecord = new MockMultipartFile("groupRecord", "5.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.fileUpload(reqUrl+"/addNounTraining")                        .file(wireImage)                        .file(wireRecord)                        .file(groupImage)                        .file(colorPenRecord)                        .file(groupRecord)                        .param("wireChar","11")                        .param("colorPenChar","11")                        .param("groupWord","111")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addNounTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addNounTraining result:" + result);        ResultActions resultActions1 = this.mockMvc.                perform(MockMvcRequestBuilders.fileUpload(reqUrl+"/addNounTraining")                        .param("wireChar","11")                        .param("colorPenChar","11")                        .param("groupWord","111")                );        MvcResult mvcResult1 = resultActions1.andReturn();        System.out.println("=====addNounTraining mvcResult:" + mvcResult1.getResponse().getStatus());        String result1 = mvcResult1.getResponse().getContentAsString();        System.out.println("=====addNounTraining result:" + result1);    }    @Test    public void updateNounTraining() throws Exception{        ResultActions resultActions0 = this.mockMvc.                perform(MockMvcRequestBuilders.fileUpload(reqUrl+"/updateNounTraining")                        .param("wireChar","11")                        .param("colorPenChar","11")                        .param("groupWord","111")                );        MockMultipartFile wireImage = new MockMultipartFile("wireImage", "1.jpeg", "image/jpeg", "some xml".getBytes());        MockMultipartFile wireRecord = new MockMultipartFile("wireRecord", "2.jpeg", "image/jpeg", "some other type".getBytes());        MockMultipartFile groupImage = new MockMultipartFile("groupImage", "3.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile colorPenRecord = new MockMultipartFile("colorPenRecord", "4.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile groupRecord = new MockMultipartFile("groupRecord", "5.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MvcResult mvcResult0 = resultActions0.andReturn();        System.out.println("=====updateNounTraining mvcResult:" + mvcResult0.getResponse().getStatus());        String result0 = mvcResult0.getResponse().getContentAsString();        System.out.println("=====updateNounTraining result:" + result0);        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.fileUpload(reqUrl+"/updateNounTraining")                        .file(wireImage)                        .file(wireRecord)                        .file(groupImage)                        .file(colorPenRecord)                        .file(groupRecord)                        .param("wireChar","11")                        .param("colorPenChar","11")                        .param("groupWord","111")                        .param("id","59")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====updateNounTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====updateNounTraining result:" + result);        ResultActions resultActions1 = this.mockMvc.                perform(MockMvcRequestBuilders.fileUpload(reqUrl+"/updateNounTraining")                        .file(wireImage)                        .file(wireRecord)                        .file(groupImage)                        .file(colorPenRecord)                        .file(groupRecord)                        .param("wireChar","11")                        .param("colorPenChar","11")                        .param("groupWord","111")                        .param("id","0")                );        MvcResult mvcResult1 = resultActions1.andReturn();        System.out.println("=====updateNounTraining mvcResult:" + mvcResult1.getResponse().getStatus());        String result1 = mvcResult1.getResponse().getContentAsString();        System.out.println("=====updateNounTraining result:" + result1);        XydNounTraining xydNounTraining = nounTrainingService.selectById(59);        xydNounTraining.setWireImage("http://yuudee.oss-cn-beijing.aliyuncs.com/c844ba5da1754a4c9421eaace33ebd72.png");        xydNounTraining.setWireChar("正面");        xydNounTraining.setWireRecord("http://yuudee.oss-cn-beijing.aliyuncs.com/5ab509133c9d4994b4bde40ba840fe86.MP3");        xydNounTraining.setColorPenChar("反面");        xydNounTraining.setColorPenRecord("http://yuudee.oss-cn-beijing.aliyuncs.com/e218140bc7de488a9b976e776da7625b.MP3");        xydNounTraining.setGroupImage("http://yuudee.oss-cn-beijing.aliyuncs.com/4c368115082c4de18fb1b5768f68c9a4.jpg");        xydNounTraining.setGroupRecord("http://yuudee.oss-cn-beijing.aliyuncs.com/fb0db83711cb4bb7b8858ef721ad3336.MP3");        xydNounTraining.setGroupWord("正面+反面");        nounTrainingService.update(xydNounTraining);    }    @Test    public void nounTrainingDetail() throws Exception{        ResultActions resultActions0 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/NounTrainingDetail")                );        MvcResult mvcResult0 = resultActions0.andReturn();        System.out.println("=====nounTrainingDetail mvcResult:" + mvcResult0.getResponse().getStatus());        String result0 = mvcResult0.getResponse().getContentAsString();        System.out.println("=====nounTrainingDetail result:" + result0);        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/NounTrainingDetail")                        .param("id","19"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====nounTrainingDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====nounTrainingDetail result:" + result);    }    @Test    public void deleteNounTraining() throws Exception{        ResultActions resultActions0 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/deleteNounTraining")                );        MvcResult mvcResult0 = resultActions0.andReturn();        System.out.println("=====deleteNounTraining mvcResult:" + mvcResult0.getResponse().getStatus());        String result0 = mvcResult0.getResponse().getContentAsString();        System.out.println("=====deleteNounTraining result:" + result0);        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/deleteNounTraining")                        .param("id","19"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====deleteNounTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====deleteNounTraining result:" + result);    }    @Test    public void getNounTestList() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getNounTestList")                        .param("start","1")                        .param("length","10")                        .param("groupChar","11")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getNounTestList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getNounTestList result:" + result);    }    @Test    public void addNounTest() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addNounTest")                        .param("fristAssistTime","10")                        .param("cardWireChar","10")                        .param("secondAssistTime","10")                        .param("groupChar","10")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addNounTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addNounTest result:" + result);        MockMultipartFile groupImage = new MockMultipartFile("groupImage", "1.jpeg", "image/jpeg", "some xml".getBytes());        MockMultipartFile cardOneImage = new MockMultipartFile("cardOneImage", "2.jpeg", "image/jpeg", "some other type".getBytes());        MockMultipartFile cardOneRecord = new MockMultipartFile("cardOneRecord", "3.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile colorPenRecord = new MockMultipartFile("cardTwoImage", "4.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile cardTwoRecord = new MockMultipartFile("cardTwoRecord", "5.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile groupRecord = new MockMultipartFile("groupRecord", "5.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        ResultActions resultActions0 = this.mockMvc.                perform(MockMvcRequestBuilders.fileUpload(reqUrl+"/addNounTest")                        .file(groupImage)                        .file(cardOneImage)                        .file(cardOneRecord)                        .file(cardTwoRecord)                        .file(colorPenRecord)                        .file(groupRecord)                        .param("cardColorChar","1")                        .param("fristAssistTime","10")                        .param("cardWireChar","10")                        .param("secondAssistTime","10")                        .param("groupChar","10")                );        MvcResult mvcResult0 = resultActions0.andReturn();        System.out.println("=====updateNounTraining mvcResult:" + mvcResult0.getResponse().getStatus());        String result0 = mvcResult0.getResponse().getContentAsString();        System.out.println("=====updateNounTraining result:" + result0);    }    @Test    public void updateNounTest() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/updateNounTest")                        .param("fristAssistTime","10")                        .param("cardWireChar","10")                        .param("secondAssistTime","10")                        .param("groupChar","10")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====updateNounTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====updateNounTest result:" + result);        MockMultipartFile groupImage = new MockMultipartFile("groupImage", "1.jpeg", "image/jpeg", "some xml".getBytes());        MockMultipartFile cardOneImage = new MockMultipartFile("cardOneImage", "2.jpeg", "image/jpeg", "some other type".getBytes());        MockMultipartFile cardOneRecord = new MockMultipartFile("cardOneRecord", "3.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile colorPenRecord = new MockMultipartFile("cardTwoImage", "4.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile cardTwoRecord = new MockMultipartFile("cardTwoRecord", "5.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile groupRecord = new MockMultipartFile("groupRecord", "5.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        ResultActions resultActions0 = this.mockMvc.                perform(MockMvcRequestBuilders.fileUpload(reqUrl+"/updateNounTest")                        .file(groupImage)                        .file(cardOneImage)                        .file(cardOneRecord)                        .file(cardTwoRecord)                        .file(colorPenRecord)                        .file(groupRecord)                        .param("cardColorChar","1")                        .param("fristAssistTime","10")                        .param("cardWireChar","10")                        .param("secondAssistTime","10")                        .param("groupChar","10")                        .param("groupChar","10")                        .param("id","58")                );        MvcResult mvcResult0 = resultActions0.andReturn();        System.out.println("=====updateNounTest mvcResult:" + mvcResult0.getResponse().getStatus());        String result0 = mvcResult0.getResponse().getContentAsString();        System.out.println("=====updateNounTest result:" + result0);        ResultActions resultActions1 = this.mockMvc.                perform(MockMvcRequestBuilders.fileUpload(reqUrl+"/updateNounTest")                        .file(groupImage)                        .file(cardOneImage)                        .file(cardOneRecord)                        .file(cardTwoRecord)                        .file(colorPenRecord)                        .file(groupRecord)                        .param("cardColorChar","1")                        .param("fristAssistTime","10")                        .param("cardWireChar","10")                        .param("secondAssistTime","10")                        .param("groupChar","10")                        .param("groupChar","10")                        .param("id","0")                );        MvcResult mvcResult1 = resultActions0.andReturn();        System.out.println("=====updateNounTest mvcResult:" + mvcResult1.getResponse().getStatus());        String result1 = mvcResult1.getResponse().getContentAsString();        System.out.println("=====updateNounTest result:" + result1);    }    @Test    public void nounTestDetail() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/NounTestDetail").param("id","58"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====nounTestDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====nounTestDetail result:" + result);        ResultActions resultActions1 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/NounTestDetail")                );        MvcResult mvcResult1 = resultActions1.andReturn();        System.out.println("=====nounTestDetail mvcResult:" + mvcResult1.getResponse().getStatus());        String result1 = mvcResult1.getResponse().getContentAsString();        System.out.println("=====nounTestDetail result:" + result1);    }    @Test    public void deleteNounTest() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/deleteNounTest")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====deleteNounTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====deleteNounTest result:" + result);        ResultActions resultActions0 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/deleteNounTest").param("id","57"));        MvcResult mvcResult0 = resultActions0.andReturn();        System.out.println("=====deleteNounTest mvcResult:" + mvcResult0.getResponse().getStatus());        String result0 = mvcResult0.getResponse().getContentAsString();        System.out.println("=====deleteNounTest result:" + result0);        ResultActions resultActions1 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/deleteNounTest").param("id","0"));        MvcResult mvcResult1 = resultActions1.andReturn();        System.out.println("=====deleteNounTest mvcResult:" + mvcResult1.getResponse().getStatus());        String result1 = mvcResult1.getResponse().getContentAsString();        System.out.println("=====deleteNounTest result:" + result1);    }    @Test    public void getNounSenseList() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getNounSenseList")                        .param("start","1")                        .param("length","10")                        .param("groupChar","10")                        .param("disturbType","10")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getNounSenseList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getNounSenseList result:" + result);    }    @Test    public void addNounSense() throws Exception{        ResultActions resultActions0 = this.mockMvc.                perform(MockMvcRequestBuilders.fileUpload(reqUrl+"/addNounSense")                        .param("cardAdjectiveChar","1")                        .param("fristAssistTime","10")                        .param("cardNounChar","10")                        .param("secondAssistTime","10")                        .param("disturbType","10")                );        MvcResult mvcResult0 = resultActions0.andReturn();        System.out.println("=====addNounSense mvcResult:" + mvcResult0.getResponse().getStatus());        String result0 = mvcResult0.getResponse().getContentAsString();        System.out.println("=====addNounSense result:" + result0);        MockMultipartFile groupImage = new MockMultipartFile("groupImage", "1.jpeg", "image/jpeg", "some xml".getBytes());        MockMultipartFile cardOneImage = new MockMultipartFile("cardOneImage", "2.jpeg", "image/jpeg", "some other type".getBytes());        MockMultipartFile cardOneRecord = new MockMultipartFile("cardOneRecord", "3.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile colorPenRecord = new MockMultipartFile("cardTwoImage", "4.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile cardTwoRecord = new MockMultipartFile("cardTwoRecord", "5.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile groupRecord = new MockMultipartFile("groupRecord", "5.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.fileUpload(reqUrl+"/addNounSense")                        .file(groupImage)                        .file(cardOneImage)                        .file(cardOneRecord)                        .file(cardTwoRecord)                        .file(colorPenRecord)                        .file(groupRecord)                        .param("cardAdjectiveChar","1")                        .param("fristAssistTime","10")                        .param("cardNounChar","10")                        .param("secondAssistTime","10")                        .param("groupChar","10")                        .param("disturbType","10")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addNounSense mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addNounSense result:" + result);    }    @Test    public void deleteNounSense() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/deleteNounSense")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====deleteNounSense mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====deleteNounSense result:" + result);        ResultActions resultActions1 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/deleteNounSense")                        .param("id","10")                );        MvcResult mvcResult1 = resultActions1.andReturn();        System.out.println("=====deleteNounSense mvcResult:" + mvcResult1.getResponse().getStatus());        String result1 = mvcResult1.getResponse().getContentAsString();        System.out.println("=====deleteNounSense result:" + result1);        ResultActions resultActions2 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/deleteNounSense")                        .param("id","0")                );        MvcResult mvcResult2 = resultActions2.andReturn();        System.out.println("=====deleteNounSense mvcResult:" + mvcResult2.getResponse().getStatus());        String result2 = mvcResult.getResponse().getContentAsString();        System.out.println("=====deleteNounSense result:" + result2);    }    @Test    public void updateNounSense() throws Exception{        ResultActions resultActions0 = this.mockMvc.                perform(MockMvcRequestBuilders.fileUpload(reqUrl+"/updateNounSense")                        .param("cardAdjectiveChar","1")                        .param("fristAssistTime","10")                        .param("cardNounChar","10")                        .param("secondAssistTime","10")                        .param("disturbType","10")                );        MvcResult mvcResult0 = resultActions0.andReturn();        System.out.println("=====addNounSense mvcResult:" + mvcResult0.getResponse().getStatus());        String result0 = mvcResult0.getResponse().getContentAsString();        System.out.println("=====addNounSense result:" + result0);        MockMultipartFile groupImage = new MockMultipartFile("groupImage", "1.jpeg", "image/jpeg", "some xml".getBytes());        MockMultipartFile cardOneImage = new MockMultipartFile("cardOneImage", "2.jpeg", "image/jpeg", "some other type".getBytes());        MockMultipartFile cardOneRecord = new MockMultipartFile("cardOneRecord", "3.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile colorPenRecord = new MockMultipartFile("cardTwoImage", "4.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile cardTwoRecord = new MockMultipartFile("cardTwoRecord", "5.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        MockMultipartFile groupRecord = new MockMultipartFile("groupRecord", "5.jpeg", "image/jpeg", "{\"json\": \"someValue\"}".getBytes());        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.fileUpload(reqUrl+"/updateNounSense")                        .file(groupImage)                        .file(cardOneImage)                        .file(cardOneRecord)                        .file(cardTwoRecord)                        .file(colorPenRecord)                        .file(groupRecord)                        .param("cardAdjectiveChar","1")                        .param("fristAssistTime","10")                        .param("cardNounChar","10")                        .param("secondAssistTime","10")                        .param("groupChar","10")                        .param("disturbType","10")                        .param("id","56")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addNounSense mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addNounSense result:" + result);        ResultActions resultActions1 = this.mockMvc.                perform(MockMvcRequestBuilders.fileUpload(reqUrl+"/updateNounSense")                        .file(groupImage)                        .file(cardOneImage)                        .file(cardOneRecord)                        .file(cardTwoRecord)                        .file(colorPenRecord)                        .file(groupRecord)                        .param("cardAdjectiveChar","1")                        .param("fristAssistTime","10")                        .param("cardNounChar","10")                        .param("secondAssistTime","10")                        .param("groupChar","10")                        .param("disturbType","10")                        .param("id","0")                );        MvcResult mvcResult1 = resultActions1.andReturn();        System.out.println("=====addNounSense mvcResult:" + mvcResult1.getResponse().getStatus());        String result1 = mvcResult1.getResponse().getContentAsString();        System.out.println("=====addNounSense result:" + result1);    }    @Test    public void nounSenseDetail() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/NounSenseDetail").param("id","10"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====NounSenseDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====NounSenseDetail result:" + result);        ResultActions resultActions1 = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/NounSenseDetail"));        MvcResult mvcResult1 = resultActions1.andReturn();        System.out.println("=====NounSenseDetail mvcResult:" + mvcResult1.getResponse().getStatus());        String result1 = mvcResult1.getResponse().getContentAsString();        System.out.println("=====NounSenseDetail result:" + result1);    }    /*@Test    public void deleteSession() throws Exception{    }    @Test    public void checkWebUserLogin() throws Exception{    }    @Test    public void getPageNum() throws Exception{    }    @Test    public void getPageSize() throws Exception{    }    @Test    public void getDraw() throws Exception{    }    @Test    public void setHttpServletResponse() throws Exception{    }    @Test    public void setHttpServletResponse1() throws Exception{    }*/}