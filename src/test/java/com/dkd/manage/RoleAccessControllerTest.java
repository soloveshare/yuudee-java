package com.dkd.manage;import com.dkd.XiaoyudiApplication;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import java.util.Arrays;import java.util.HashMap;import java.util.Map;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class RoleAccessControllerTest {    private final Logger logger = LoggerFactory.getLogger(RoleAccessControllerTest.class);    private MockMvc mockMvc;    @Autowired    private RoleAccessController roleAccessController;    private String reqUrl = "/manage/roleAccess";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(roleAccessController).build();    }    @After    public void tearDown() throws Exception {    }    @Test    public void toRoleListPage() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toRoleListPage")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toRoleListPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toRoleListPage result:" + result);    }    @Test    public void eecManageRoleList() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/eecManageRoleList")                .param("id","13")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====eecManageRoleList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====eecManageRoleList result:" + result);    }    @Test    public void toRoleaddPage() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.get(reqUrl + "/toRoleaddPage"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toRoleaddPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toRoleaddPage result:" + result);    }    @Test    public void getRoleList() throws Exception{        Map<String, String> params = new HashMap<String, String>(){{            put("start", "1");            put("length", "10");            put("roleName", "管理员");        }};        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/getRoleList.ajax")                .param("params", params.toString())        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getRoleList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getRoleList result:" + result);    }    @Test    public void infoRole() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/infoRole")                .param("roleId", "22")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====infoRole mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====infoRole result:" + result);    }    @Test    public void deleteRole() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/deleteRole")                .param("roleId", "13")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteRole mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteRole result:" + result);    }    @Test    public void addorUpdateRole() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("roleName", Arrays.asList("管理员"));        params.put("remark", Arrays.asList("1"));        params.put("role", Arrays.asList("2"));        params.put("status", Arrays.asList("0"));        params.put("access", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addorUpdateRole")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addorUpdateRole mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addorUpdateRole result:" + result);    }    @Test    public void addorUpdateRole1() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("roleName", Arrays.asList("管理员"));        params.put("remark", Arrays.asList("1"));        params.put("role", Arrays.asList("1"));        params.put("status", Arrays.asList("0"));        params.put("access", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addorUpdateRole")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addorUpdateRole mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addorUpdateRole result:" + result);    }    @Test    public void addorUpdateRole2() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("roleName", Arrays.asList("管理员"));        params.put("remark", Arrays.asList("管理员"));        params.put("role", Arrays.asList("1"));        params.put("status", Arrays.asList("0"));        params.put("id", Arrays.asList("1"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addorUpdateRole")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addorUpdateRole mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addorUpdateRole result:" + result);    }    @Test    public void addorUpdateRole3() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("roleName", Arrays.asList("管理员"));        params.put("remark", Arrays.asList("管理员"));        params.put("role", Arrays.asList("1"));        params.put("status", Arrays.asList("0"));        params.put("id", Arrays.asList("22"));        params.put("access", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addorUpdateRole")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addorUpdateRole mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addorUpdateRole result:" + result);    }    @Test    public void addorUpdateRole4() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("roleName", Arrays.asList("管理员"));        params.put("remark", Arrays.asList(""));        params.put("role", Arrays.asList("1"));        params.put("status", Arrays.asList("0"));        params.put("id", Arrays.asList("22"));        params.put("access", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addorUpdateRole")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addorUpdateRole mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addorUpdateRole result:" + result);    }    @Test    public void deleteSession() throws Exception{    }    @Test    public void checkWebUserLogin() throws Exception{    }    @Test    public void getPageNum() throws Exception{    }    @Test    public void getPageSize() throws Exception{    }    @Test    public void getDraw() throws Exception{    }    @Test    public void setHttpServletResponse() throws Exception{    }    @Test    public void setHttpServletResponse1() throws Exception{    }}