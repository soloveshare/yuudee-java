package com.dkd.manage;import com.dkd.XiaoyudiApplication;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import java.util.Arrays;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class QuestionControllerTest {    private final Logger logger = LoggerFactory.getLogger(QuestionControllerTest.class);    private MockMvc mockMvc;    @Autowired    private QuestionController questionController;    private String reqUrl = "/manage/roll";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(questionController).build();    }    @After    public void tearDown() throws Exception {    }    @Test    public void toPcdiList() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.get(reqUrl + "/toPcdiList"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdiList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdiList result:" + result);    }    @Test    public void toPcdiInfo() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toPcdiAddPage")                .param("ids","30,2,3")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdiInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdiInfo result:" + result);    }    @Test    public void toPcdiInfo1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toPcdiAddPage")                .param("ids","20,1,3")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdiInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdiInfo result:" + result);    }    @Test    public void addPcdiMust() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addPcdi/Must")                .param("id","37")                .param("nameEnum","5")                .param("topicTitle","topicTitle")                .param("describes","describes")                .param("topicResult","topicResult")                .param("score","1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addPcdiMust mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addPcdiMust result:" + result);    }    @Test    public void addPcdiMust1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addPcdi/Must")                .param("id","37")                .param("nameEnum","3")                .param("topicTitle","topicTitle")                .param("describes","describes")                .param("topicResult","topicResult")                .param("score","1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addPcdiMust mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addPcdiMust result:" + result);    }    @Test    public void addPcdiMust2() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addPcdi/Must")                .param("nameEnum","5")                .param("topicTitle","topicTitle")                .param("describes","describes")                .param("topicResult","topicResult")                .param("score","1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addPcdiMust mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addPcdiMust result:" + result);    }    @Test    public void addPcdiMust3() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addPcdi/Must")                .param("nameEnum","1")                .param("topicTitle","topicTitle")                .param("describes","describes")                .param("topicResult","topicResult")                .param("score","1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addPcdiMust mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addPcdiMust result:" + result);    }    @Test    public void addPcdiMust4() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addPcdi/Must")                .param("nameEnum","3")                .param("topicTitle","topicTitle")                .param("describes","describes")                .param("topicResult","topicResult")                .param("score","1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addPcdiMust mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addPcdiMust result:" + result);    }    @Test    public void getIntroduceList() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("start", Arrays.asList("1"));        params.put("length", Arrays.asList("10"));        params.put("topictitle", Arrays.asList("topictitle"));        params.put("type", Arrays.asList("10"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getpcdiMustList.ajax")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getIntroduceList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getIntroduceList result:" + result);    }    @Test    public void toPcdidelete() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toPcdidelete")                .param("ids", "66,1,3")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdidelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdidelete result:" + result);    }    @Test    public void toPcdidelete1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toPcdidelete")                .param("ids", "66,2,3")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdidelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdidelete result:" + result);    }    @Test    public void toPcdidelete2() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toPcdidelete")                .param("ids", "")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdidelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdidelete result:" + result);    }    @Test    public void toPcdidelete3() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toPcdidelete")                .param("ids", "66000,1,3")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdidelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdidelete result:" + result);    }    @Test    public void toPcdidelete4() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toPcdidelete")                .param("ids", "66000,2,3")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdidelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdidelete result:" + result);    }    @Test    public void toPcdidelete5() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toPcdidelete")                .param("ids", "66000")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdidelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdidelete result:" + result);    }    @Test    public void toPcdiSelectList() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.get(reqUrl + "/toPcdiSelectList"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdiSelectList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdiSelectList result:" + result);    }    @Test    public void getpcdiSelectList() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("start", Arrays.asList("1"));        params.put("length", Arrays.asList("10"));        params.put("topictitle", Arrays.asList("topictitle"));        params.put("type", Arrays.asList("10"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getpcdiSelectList.ajax")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getpcdiSelectList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getpcdiSelectList result:" + result);    }    @Test    public void pcdiSelectDelete() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toPcdiSelectDelete")                .param("id", "")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====pcdiSelectDelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====pcdiSelectDelete result:" + result);    }    @Test    public void pcdiSelectDelete1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toPcdiSelectDelete")                .param("id", "8813")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====pcdiSelectDelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====pcdiSelectDelete result:" + result);    }    @Test    public void pcdiSelectDelete2() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toPcdiSelectDelete")                .param("id", "8813000")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====pcdiSelectDelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====pcdiSelectDelete result:" + result);    }    @Test    public void toPcdiSelectAdd() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/PcdiSelectAdd")                .param("type", "21")                .param("name", "1")                .param("id", "8820")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdiSelectAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdiSelectAdd result:" + result);    }    @Test    public void toPcdiSelectAdd1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/PcdiSelectAdd")                .param("type", "1")                .param("name", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdiSelectAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdiSelectAdd result:" + result);    }    @Test    public void toPcdiSelectAdd2() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/PcdiSelectAdd")                .param("type", "6")                .param("name", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdiSelectAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdiSelectAdd result:" + result);    }    @Test    public void toPcdiSelectAdd3() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/PcdiSelectAdd")                .param("type", "36")                .param("name", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdiSelectAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdiSelectAdd result:" + result);    }    @Test    public void toPcdiSelectAdd4() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/PcdiSelectAdd")                .param("type", "24")                .param("name", "1")                .param("id", "8820")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdiSelectAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdiSelectAdd result:" + result);    }    @Test    public void toPcdiSelectAdd5() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/PcdiSelectAdd")                .param("type", "21")                .param("name", "1")                .param("id", "882000")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdiSelectAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdiSelectAdd result:" + result);    }    @Test    public void toPcdiSelectAdd6() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/PcdiSelectAdd")                .param("type", "24")                .param("name", "name")                .param("id", "8820")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toPcdiSelectAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toPcdiSelectAdd result:" + result);    }    @Test    public void toAbcPage() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.get(reqUrl + "/toAbcListPage"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAbcPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAbcPage result:" + result);    }    @Test    public void getAbcList() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("start", Arrays.asList("1"));        params.put("length", Arrays.asList("10"));        params.put("topictitle", Arrays.asList("topictitle"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getAbcList.ajax")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getAbcList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getAbcList result:" + result);    }    @Test    public void toAbcDelete() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAbcDelete")                .param("id","1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAbcDelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAbcDelete result:" + result);    }    @Test    public void toAbcDelete1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAbcDelete")                .param("id","83")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAbcDelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAbcDelete result:" + result);    }    @Test    public void toAbcAdd() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAbcAdd")                .param("id","25")                .param("name","1")                .param("sort","1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAbcAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAbcAdd result:" + result);    }    @Test    public void toAbcAdd1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAbcAdd")                .param("id","25")                .param("name","1")                .param("sort","100")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAbcAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAbcAdd result:" + result);    }    @Test    public void toAbcAdd2() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAbcAdd")                .param("name","1")                .param("sort","1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAbcAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAbcAdd result:" + result);    }    @Test    public void toAbcAdd3() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAbcAdd")                .param("name","")                .param("sort","1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAbcAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAbcAdd result:" + result);    }    @Test    public void toAbcAdd4() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAbcAdd")                .param("name","1")                .param("sort","200")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAbcAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAbcAdd result:" + result);    }    @Test    public void toAbcAdd5() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAbcAdd")                .param("name","1")                .param("sort","")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAbcAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAbcAdd result:" + result);    }    @Test    public void toAbcAdd6() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAbcAdd")                .param("id","25")                .param("name","1dsafasdfsadga")                .param("sort","100")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAbcAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAbcAdd result:" + result);    }    @Test    public void toAbcAdd7() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAbcAdd")                .param("name","1fasdfaensdlkf8y8932y5")                .param("sort","200")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAbcAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAbcAdd result:" + result);    }    @Test    public void toResultPage() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/topcdiAndabc/resultPage")                .param("id", "390")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toResultPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toResultPage result:" + result);    }    @Test    public void toResultPage3() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/topcdiAndabc/resultPage")                .param("id", "391")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toResultPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toResultPage result:" + result);    }    @Test    public void toResultPage2() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/topcdiAndabc/resultPage")                .param("id", "392")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toResultPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toResultPage result:" + result);    }    @Test    public void getresultList() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("start", Arrays.asList("1"));        params.put("length", Arrays.asList("10"));        params.put("name", Arrays.asList("topictitle"));        params.put("sex", Arrays.asList("0"));        params.put("type", Arrays.asList("0"));        params.put("birthdate", Arrays.asList("1999-01-01"));        params.put("phone", Arrays.asList("18112345432"));        params.put("valid", Arrays.asList("0"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getresultList.ajax")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getresultList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getresultList result:" + result);    }    @Test    public void resultInfoPage() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/topcdiAndabc/resultInfoPage")                .param("id","101")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====resultInfoPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====resultInfoPage result:" + result);    }    @Test    public void toResultPage1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/topcdiAndabc/resultInfo")                .param("id","345")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toResultPage1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toResultPage1 result:" + result);    }    @Test    public void toResultPage7() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/topcdiAndabc/resultInfo")                .param("id","346")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toResultPage1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toResultPage1 result:" + result);    }    @Test    public void toResultPage8() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/topcdiAndabc/resultInfo")                .param("id","347")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toResultPage1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toResultPage1 result:" + result);    }    @Test    public void adviceInfo() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/topcdiAndabc/adviceInfo")                .param("resultId","344")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====adviceInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====adviceInfo result:" + result);    }    @Test    public void adviceupdate() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/topcdiAndabc/adviceupdate")                .param("id","343")                .param("topicTitle","topicTitle")                .param("sentenceTitle","sentenceTitle")                .param("vocabulary","vocabulary")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====adviceupdate mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====adviceupdate result:" + result);    }    @Test    public void adviceupdate1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/topcdiAndabc/adviceupdate")                .param("id","344")                .param("sentenceTitle","sentenceTitle")                .param("vocabulary","vocabulary")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====adviceupdate mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====adviceupdate result:" + result);    }    @Test    public void adviceupdate4() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/topcdiAndabc/adviceupdate")                .param("id","344")                .param("sentenceTitle","sentenceTitle")                .param("vocabulary","vocabulary")                .param("topicTitle","topicTitle")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====adviceupdate mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====adviceupdate result:" + result);    }    @Test    public void adviceupdate2() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/topcdiAndabc/adviceupdate")                .param("id","343")                .param("sentenceTitle","")                .param("vocabulary","")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====adviceupdate mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====adviceupdate result:" + result);    }    @Test    public void adviceupdate3() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/topcdiAndabc/adviceupdate")                .param("id","3440")                .param("sentenceTitle","sentenceTitle")                .param("vocabulary","vocabulary")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====adviceupdate mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====adviceupdate result:" + result);    }    @Test    public void toWordListPage() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.get(reqUrl + "/toWordListPage"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toWordListPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toWordListPage result:" + result);    }    @Test    public void toWordList() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("start", Arrays.asList("1"));        params.put("length", Arrays.asList("10"));        params.put("type", Arrays.asList("0"));        params.put("valid", Arrays.asList("10"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toWordList.ajax")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toWordList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toWordList result:" + result);    }    @Test    public void toWordInfoPage() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toWordInfoPage")                .param("id", "99")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toWordInfoPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toWordInfoPage result:" + result);    }    @Test    public void wordDelete() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/wordDelete")                .param("id", "107")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====wordDelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====wordDelete result:" + result);    }    @Test    public void wordDelete1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/wordDelete")                .param("id", "10700000")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====wordDelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====wordDelete result:" + result);    }    @Test    public void wordDelete2() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/wordDelete")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====wordDelete mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====wordDelete result:" + result);    }    @Test    public void wordAdd() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/wordAdd")                .param("type", "1")                .param("isOptional", "1")                .param("topicType", "1")                .param("more", "1")                .param("sex", "1")                .param("state", "1")                .param("end", "1")                .param("content", "content")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====wordAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====wordAdd result:" + result);    }    @Test    public void wordAdd1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/wordAdd")                .param("id", "100")                .param("type", "1")                .param("isOptional", "1")                .param("topicType", "1")                .param("more", "1")                .param("sex", "1")                .param("state", "1")                .param("end", "1")                .param("content", "content")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====wordAdd mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====wordAdd result:" + result);    }    @Test    public void deleteSession() throws Exception{    }    @Test    public void checkWebUserLogin() throws Exception{    }    @Test    public void getPageNum() throws Exception{    }    @Test    public void getPageSize() throws Exception{    }    @Test    public void getDraw() throws Exception{    }    @Test    public void setHttpServletResponse() throws Exception{    }    @Test    public void setHttpServletResponse1() throws Exception{    }}