package com.dkd.manage;import com.dkd.XiaoyudiApplication;import com.dkd.common.config.Global;import com.dkd.common.utils.MyMD5Util;import com.dkd.model.XydManageAccount;import com.dkd.service.impl.XydManageAccountServiceImpl;import com.dkd.service.impl.XydManageRoleServiceImpl;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.mock.web.MockHttpSession;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import java.util.ArrayList;import java.util.List;import static org.mockito.Mockito.when;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class IndexControllerTest {    private final Logger logger = LoggerFactory.getLogger(IndexControllerTest.class);    private MockMvc mockMvc;    @InjectMocks    private IndexController indexController;    @Mock    private XydManageAccountServiceImpl xydManageAccountService;    @Mock    private XydManageRoleServiceImpl manageRoleService;    @Mock    Global global;    private String reqUrl = "/manage/account";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(indexController).build();    }    @After    public void tearDown() throws Exception {    }    @Test    public void tologinPage() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toLogin"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====tologinPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====tologinPage result:" + result);    }    @Test    public void toIndex() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====index mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====index result:" + result);    }    @Test    public void toindexPage() throws Exception {        MockHttpSession session = new MockHttpSession();        XydManageAccount xydManageAccount = new XydManageAccount();        xydManageAccount.setId(19);        session.setAttribute("user",xydManageAccount);        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders                        .request(HttpMethod.POST,reqUrl+"/toindexPage")                        .session(session));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toindexPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toindexPage result:" + result);    }    @Test    public void login() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/login")                        .param("username","17795591253")                        .param("password","123456"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====login mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====login result:" + result);    }    @Test    public void outlogin() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders                        .request(HttpMethod.GET,reqUrl+"/loginOut"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====loginOut mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====loginOut result:" + result);    }    @Test    public void updatePassword() throws Exception {        XydManageAccount xydManageAccount = new XydManageAccount();        xydManageAccount.setId(19);        xydManageAccount.setPassword(MyMD5Util.getEncryptedPwd("123456"));        when(xydManageAccountService.selectByPrimaryKey(19)).thenReturn(xydManageAccount);        when(xydManageAccountService.updateByPrimaryKeySelective(xydManageAccount)).thenReturn(1);        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders                        .request(HttpMethod.POST,reqUrl+"/updatePassword")                        .param("oldPassword","123456")                        .param("newPassword","123456")                        .param("accountId","19"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====updatePassword mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====updatePassword result:" + result);    }    @Test    public void getUserAccessList() throws Exception {        MockHttpSession session = new MockHttpSession();        XydManageAccount xydManageAccount = new XydManageAccount();        xydManageAccount.setId(19);        List<XydManageAccount> xydManageAccounts = new ArrayList<>();        xydManageAccounts.add(xydManageAccount);        when(xydManageAccountService.selectByPrimaryKey(19)).thenReturn(xydManageAccount);        session.setAttribute("AccessList"+xydManageAccount.getId(),xydManageAccounts);        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders                        .request(HttpMethod.POST,reqUrl+"/getUserAccessList")                        .param("id","19")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getUserAccessList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getUserAccessList result:" + result);    }    @Test    public void getAccountList() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getAccountList"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getAccountList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getAccountList result:" + result);    }    @Test    public void addAccountPage() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addAccountPage"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addAccountPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addAccountPage result:" + result);    }    @Test    public void addAccount() throws Exception {        when(xydManageAccountService.selectByAccount("1231")).thenReturn(null);        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders                        .request(HttpMethod.POST,reqUrl+"/addAccount")                        .param("name","1231")                        .param("phone","17795591253")                        .param("account","1231")                        .param("roleId","1")                        .param("password","123456")                        .param("roleIds","")                        .param("id","19")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addAccount mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addAccount result:" + result);    }    @Test    public void getAccountListAjax() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getAccountList.ajax")                        .param("start","1")                        .param("length","10"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getAccountList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getAccountList result:" + result);    }    @Test    public void deleteAccount() throws Exception {        XydManageAccount manageAccount = new XydManageAccount();        manageAccount.setId(19);        manageAccount.setPassword(MyMD5Util.getEncryptedPwd("123456"));        when(xydManageAccountService.selectByPrimaryKey(12)).thenReturn(manageAccount);        when(xydManageAccountService.updateByPrimaryKeySelective(manageAccount)).thenReturn(1);        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders                        .request(HttpMethod.POST,reqUrl+"/deleteAccount")                        .param("accountId","12")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====deleteAccount mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====deleteAccount result:" + result);    }    @Test    public void resetPassword() throws Exception {        when(global.getXydPassword()).thenReturn("12345678");        XydManageAccount manageAccount = new XydManageAccount();        manageAccount.setId(19);        manageAccount.setPassword(MyMD5Util.getEncryptedPwd("123456"));        when(xydManageAccountService.selectByPrimaryKey(19)).thenReturn(manageAccount);        when(xydManageAccountService.updateByPrimaryKeySelective(manageAccount)).thenReturn(1);        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders                        .request(HttpMethod.POST,reqUrl+"/resetPassword")                        .param("accountId","19")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====resetPassword mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====resetPassword result:" + result);    }    @Test    public void infoAccount() throws Exception {        when(xydManageAccountService.selectByPrimaryKey(19)).thenReturn(new XydManageAccount());        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/infoAccount")                        .param("accountId","19")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====infoAccount mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====infoAccount result:" + result);    }}