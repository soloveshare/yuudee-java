package com.dkd.manage;import com.dkd.XiaoyudiApplication;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class UserStudyControllerTest {    private final Logger logger = LoggerFactory.getLogger(UserStudyControllerTest.class);    private MockMvc mockMvc;    @Autowired    private UserStudyController userStudyController;    private String reqUrl = "/manage/study";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(userStudyController).build();    }    @After    public void tearDown() throws Exception {    }    @Test    public void toUserStudyInfo() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders                .post(reqUrl + "/toUserStudyInfo")                .param("id", "126")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toUserStudyInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toUserStudyInfo result:" + result);    }    @Test    public void getUserDataInfo() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getUserDataInfo")                .param("id", "126")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getUserDataInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getUserDataInfo result:" + result);    }    @Test    public void getUserDataInfo2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getUserDataInfo")                .param("id", "120")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getUserDataInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getUserDataInfo result:" + result);    }    @Test    public void getUserDataInfo1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getUserDataInfo")                .param("id", "")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getUserDataInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getUserDataInfo result:" + result);    }    @Test    public void getUserStudyInfo() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getUserStudyInfo")                .param("id", "137")                .param("timeType", "2")                .param("dayTime", "2019-04-26")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getUserStudyInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getUserStudyInfo result:" + result);    }@Test    public void getUserStudyInfo4() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getUserStudyInfo")                .param("id", "137")                .param("timeType", "2")                .param("startTime", "2019-04-26")                .param("endTime", "2019-04-26")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getUserStudyInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getUserStudyInfo result:" + result);    }    @Test    public void getUserStudyInfo11() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getUserStudyInfo")                .param("id", "137")                .param("timeType", "1")                .param("dayTime", "2019-04-26")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getUserStudyInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getUserStudyInfo result:" + result);    }    @Test    public void getUserStudyInfo3() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getUserStudyInfo")                .param("id", "137")                .param("timeType", "3")                .param("dayTime", "2019-04-26")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getUserStudyInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getUserStudyInfo result:" + result);    }    @Test    public void getUserStudyInfo2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getUserStudyInfo")                .param("id", "120")                .param("timeType", "2")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getUserStudyInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getUserStudyInfo result:" + result);    }    @Test    public void getUserStudyInfo1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getUserStudyInfo")                .param("id", "")                .param("timeType", "2")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getUserStudyInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getUserStudyInfo result:" + result);    }}