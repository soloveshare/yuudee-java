package com.dkd.manage;import com.dkd.XiaoyudiApplication;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import java.util.Arrays;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class TrainingControllerTest {    private final Logger logger = LoggerFactory.getLogger(TrainingControllerTest.class);    private MockMvc mockMvc;    @Autowired    private TrainingController trainingController;    private String reqUrl = "/manage/trainTest";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(trainingController).build();    }    @After    public void tearDown() throws Exception {    }    @Test    public void toCoursewaretListPage() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toCoursewaretListPage"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toCoursewaretListPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toCoursewaretListPage result:" + result);    }    @Test    public void touserDetailList() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/touserDetailList"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====touserDetailList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====touserDetailList result:" + result);    }    @Test    public void toGetTrainingResultList() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toTrainingResults"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toTrainingResults mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toTrainingResults result:" + result);    }    @Test    public void toGetTrainingResultList1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toTrainingResults")                .param("userId", "147")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toTrainingResults mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toTrainingResults result:" + result);    }    @Test    public void getTrainingResultList() throws Exception {        MultiValueMap<String,String> jsonObject = new LinkedMultiValueMap<>();        jsonObject.put("start", Arrays.asList("1"));        jsonObject.put("length",Arrays.asList("10"));        jsonObject.put("groupWord",Arrays.asList("groupWord"));        jsonObject.put("disturbType",Arrays.asList("disturbType"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getTrainingResultList")                .params(jsonObject)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getTrainingResultList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getTrainingResultList result:" + result);    }    @Test    public void getTrainingResultList1() throws Exception {        MultiValueMap<String,String> jsonObject = new LinkedMultiValueMap<>();        jsonObject.put("start", Arrays.asList("1"));        jsonObject.put("length",Arrays.asList("10"));        jsonObject.put("name",Arrays.asList("黑猫"));        jsonObject.put("userId",Arrays.asList("147"));        jsonObject.put("module",Arrays.asList("1"));        jsonObject.put("scene",Arrays.asList("1"));        jsonObject.put("pass",Arrays.asList("1"));        jsonObject.put("errorType",Arrays.asList("1"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getTrainingResultList")                .params(jsonObject)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getTrainingResultList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getTrainingResultList result:" + result);    }    @Test    public void getCoursewaretList1() throws Exception {        MultiValueMap<String,String> jsonObject = new LinkedMultiValueMap<>();        jsonObject.put("start", Arrays.asList("1"));        jsonObject.put("length",Arrays.asList("10"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getCoursewaretList1")                .params(jsonObject)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getCoursewaretList1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getCoursewaretList1 result:" + result);    }    @Test    public void getCoursewaretList11() throws Exception {        MultiValueMap<String,String> jsonObject = new LinkedMultiValueMap<>();        jsonObject.put("start", Arrays.asList("1"));        jsonObject.put("length",Arrays.asList("10"));        jsonObject.put("name",Arrays.asList("黑猫"));        jsonObject.put("module",Arrays.asList("1"));        jsonObject.put("scene",Arrays.asList("1"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getCoursewaretList1")                .params(jsonObject)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getCoursewaretList1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getCoursewaretList1 result:" + result);    }    @Test    public void getCoursewaretList12() throws Exception {        MultiValueMap<String,String> jsonObject = new LinkedMultiValueMap<>();        jsonObject.put("start", Arrays.asList("1"));        jsonObject.put("length",Arrays.asList("10"));        jsonObject.put("name",Arrays.asList("黑猫"));        jsonObject.put("module",Arrays.asList("4"));        jsonObject.put("scene",Arrays.asList("1"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getCoursewaretList1")                .params(jsonObject)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getCoursewaretList1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getCoursewaretList1 result:" + result);    }    @Test    public void getCoursewaretList() throws Exception {        MultiValueMap<String,String> jsonObject = new LinkedMultiValueMap<>();        jsonObject.put("start", Arrays.asList("1"));        jsonObject.put("length",Arrays.asList("10"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getCoursewaretList")                .params(jsonObject)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getCoursewaretList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getCoursewaretList result:" + result);    }    @Test    public void getCoursewaretList2() throws Exception {        MultiValueMap<String,String> jsonObject = new LinkedMultiValueMap<>();        jsonObject.put("start", Arrays.asList("1"));        jsonObject.put("length",Arrays.asList("10"));        jsonObject.put("name",Arrays.asList("黑猫"));        jsonObject.put("module",Arrays.asList("1"));        jsonObject.put("scene",Arrays.asList("1"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getCoursewaretList")                .params(jsonObject)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getCoursewaretList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getCoursewaretList result:" + result);    }    @Test    public void getUserDetailList() throws Exception {        MultiValueMap<String,String> jsonObject = new LinkedMultiValueMap<>();        jsonObject.put("start", Arrays.asList("1"));        jsonObject.put("length",Arrays.asList("10"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getUserDetailList")                .params(jsonObject)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getUserDetailList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getUserDetailList result:" + result);    }    @Test    public void getUserDetailList2() throws Exception {        MultiValueMap<String,String> jsonObject = new LinkedMultiValueMap<>();        jsonObject.put("start", Arrays.asList("1"));        jsonObject.put("length",Arrays.asList("10"));        jsonObject.put("name",Arrays.asList("刀妹"));        jsonObject.put("birthdate",Arrays.asList("2016-12-03"));        jsonObject.put("sex",Arrays.asList("0"));        jsonObject.put("phoneNumber",Arrays.asList("16601215921"));        jsonObject.put("countiy",Arrays.asList("110"));        jsonObject.put("province",Arrays.asList("110"));        jsonObject.put("city",Arrays.asList("111"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getUserDetailList")                .params(jsonObject)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getUserDetailList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getUserDetailList result:" + result);    }}