package com.dkd.api;import com.dkd.XiaoyudiApplication;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class ToyControllerTest {    private final Logger logger = LoggerFactory.getLogger(ToyControllerTest.class);    private MockMvc mockMvc;    @Autowired    private ToyController toyController;    private String reqUrl = "/app/toy";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(toyController).build();    }    @After    public void tearDown() throws Exception {    }    @Test    public void getToyList() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toyList")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("module","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getToyList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getToyList result:" + result);    }    @Test    public void useToy() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/useToy")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("number","1")                        .param("module","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====useToy mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====useToy result:" + result);    }    @Test    public void deleteUseToy() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/empty/useToy")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("module","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====deleteUseToy mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====deleteUseToy result:" + result);    }}