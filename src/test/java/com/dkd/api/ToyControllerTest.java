package com.dkd.api;import com.dkd.XiaoyudiApplication;import com.dkd.common.utils.RedisService;import net.sf.json.JSONObject;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.context.WebApplicationContext;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class ToyControllerTest {    private final Logger logger = LoggerFactory.getLogger(ToyControllerTest.class);    private MockMvc mockMvc;    @Autowired    private WebApplicationContext webApplicationContext;    private String reqUrl = "/app/toy";    private String loginReqUrl = "/app/user";    @Autowired    private RedisService redisService;    private  String token;    private  String mobile="18249812074";    private  String tokenOther;    private  String mobileOther="15848959788";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();        String tokenCacheKey = "userToken"+mobile;        Object tokenObj = redisService.get(tokenCacheKey);        if(tokenObj==null) {            ResultActions resultActionsToken = this.mockMvc.                    perform(MockMvcRequestBuilders.post(loginReqUrl + "/generalLogin")                            .param("phone", mobile)                            .param("password", "123456")                            .param("qcellcoreId", "1")                    );            MvcResult mvcResultToken = resultActionsToken.andReturn();            logger.info("=====generalLogin mvcResult:" + mvcResultToken.getResponse().getStatus());            String resultToken = mvcResultToken.getResponse().getContentAsString();            logger.info("=====generalLogin result :" + resultToken);            JSONObject jsonObject = JSONObject.fromObject(resultToken);            String tokenJson = jsonObject.optString("data");            String parents = JSONObject.fromObject(tokenJson).optString("parents");            token = JSONObject.fromObject(parents).optString("token");            redisService.set(tokenCacheKey,token,24*60*60L);            logger.info("=====generalLogin result token:" + token);        }else {            System.err.println("已登录"+tokenCacheKey+":"+tokenObj);            token = String.valueOf(tokenObj);        }        String mobileOtherTokenCacheKey = "userToken"+mobileOther;        Object tokenObjOther = redisService.get(mobileOtherTokenCacheKey);        if(tokenObj==null) {            this.mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();            ResultActions resultActionsOther = this.mockMvc.                    perform(MockMvcRequestBuilders.post(loginReqUrl + "/generalLogin")                            .param("phone",mobileOther)                            .param("password","123456")                            .param("qcellcoreId","1")                    );            MvcResult mvcResultOther = resultActionsOther.andReturn();            logger.info("=====generalLogin mvcResult:" + mvcResultOther.getResponse().getStatus());            String resultOther = mvcResultOther.getResponse().getContentAsString();            logger.info("=====generalLogin result :" + resultOther);            JSONObject jsonObjectOther = JSONObject.fromObject(resultOther);            String  tokenJsonOther =  jsonObjectOther.optString("data");            String parentsOther =  JSONObject.fromObject(tokenJsonOther).optString("parents");            tokenOther =  JSONObject.fromObject(parentsOther).optString("token");            logger.info("=====generalLogin result token:" + tokenOther);            redisService.set(mobileOtherTokenCacheKey,tokenOther,24*60*60L);        }else {            System.err.println("已登录"+tokenCacheKey+":"+tokenObjOther);            tokenOther = String.valueOf(tokenObjOther);        }    }    @Test    public void getToyList() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toyList")                        .param("token","")                        .param("module","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getToyList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getToyList result:" + result);        ResultActions resultActionsOther = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toyList")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("module","")                );        MvcResult mvcResultOther = resultActionsOther.andReturn();        System.out.println("=====getToyList mvcResult:" + mvcResultOther.getResponse().getStatus());        String resultOther = mvcResultOther.getResponse().getContentAsString();        System.out.println("=====getToyList result:" + resultOther);        ResultActions resultActionsOtherTwo = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toyList")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("module","1")                );        MvcResult mvcResultOtherTwo = resultActionsOtherTwo.andReturn();        System.out.println("=====getToyList mvcResult:" + mvcResultOtherTwo.getResponse().getStatus());        String resultOtherTwo = mvcResultOtherTwo.getResponse().getContentAsString();        System.out.println("=====getToyList result:" + resultOtherTwo);        ResultActions resultActionsOtherThree = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toyList")                        .param("token",token)                        .param("module","3")                );        MvcResult mvcResultOtherThree = resultActionsOtherThree.andReturn();        System.out.println("=====getToyList mvcResult:" + mvcResultOtherThree.getResponse().getStatus());        String resultOtherThree = mvcResultOtherThree.getResponse().getContentAsString();        System.out.println("=====getToyList result:" + resultOtherThree);        ResultActions resultActionsOtherFour = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toyList")                        .param("token",token)                        .param("module","6")                );        MvcResult mvcResultOtherFour = resultActionsOtherFour.andReturn();        System.out.println("=====getToyList mvcResult:" + mvcResultOtherFour.getResponse().getStatus());        String resultOtherFour = mvcResultOtherFour.getResponse().getContentAsString();        System.out.println("=====getToyList result:" + resultOtherFour);        ResultActions resultActionsOtherFive = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toyList")                        .param("token",token)                        .param("module","5")                );        MvcResult mvcResultOtherFive = resultActionsOtherFive.andReturn();        System.out.println("=====getToyList mvcResult:" + mvcResultOtherFive.getResponse().getStatus());        String resultOtherFive = mvcResultOtherFive.getResponse().getContentAsString();        System.out.println("=====getToyList result:" + resultOtherFive);        ResultActions resultActionsOtherSix = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toyList")                        .param("token",tokenOther)                        .param("module","5")                );        MvcResult mvcResultOtherSix = resultActionsOtherSix.andReturn();        System.out.println("=====getToyList mvcResult:" + mvcResultOtherSix.getResponse().getStatus());        String resultOtherSix = mvcResultOtherSix.getResponse().getContentAsString();        System.out.println("=====getToyList result:" + resultOtherSix);    }    @Test    public void useToy() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/useToy")                        .param("token","")                        .param("number","1")                        .param("module","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====useToy mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====useToy result:" + result);        ResultActions resultActionsOther = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/useToy")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("number","1")                        .param("module","1")                );        MvcResult mvcResultOther = resultActionsOther.andReturn();        System.out.println("=====useToy mvcResult:" + mvcResultOther.getResponse().getStatus());        String resultOther = mvcResultOther.getResponse().getContentAsString();        System.out.println("=====useToy result:" + resultOther);        ResultActions resultActionsOtherTwo = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/useToy")                        .param("token",token)                        .param("number","1")                        .param("module","1")                );        MvcResult mvcResultOtherTwo = resultActionsOtherTwo.andReturn();        System.out.println("=====useToy mvcResult:" + mvcResultOtherTwo.getResponse().getStatus());        String resultOtherTwo = mvcResultOtherTwo.getResponse().getContentAsString();        System.out.println("=====useToy result:" + resultOtherTwo);        ResultActions resultActionsOtherThree = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/useToy")                        .param("token",token)                        .param("number","1")                        .param("module","7")                );        MvcResult mvcResultOtherThree = resultActionsOtherThree.andReturn();        System.out.println("=====useToy mvcResult:" + mvcResultOtherThree.getResponse().getStatus());        String resultOtherThree = mvcResultOtherThree.getResponse().getContentAsString();        System.out.println("=====useToy result:" + resultOtherThree);        ResultActions resultActionsOtherFour = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/useToy")                        .param("token",token)                        .param("number","1")                        .param("module","5")                );        MvcResult mvcResultOtherFour = resultActionsOtherFour.andReturn();        System.out.println("=====useToy mvcResult:" + mvcResultOtherFour.getResponse().getStatus());        String resultOtherFour = mvcResultOtherFour.getResponse().getContentAsString();        System.out.println("=====useToy result:" + resultOtherFour);        ResultActions resultActionsOtherSix = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/useToy")                        .param("token",tokenOther)                        .param("number","1")                        .param("module","5")                );        MvcResult mvcResultOtherSix = resultActionsOtherSix.andReturn();        System.out.println("=====useToy mvcResult:" + mvcResultOtherSix.getResponse().getStatus());        String resultOtherSix = mvcResultOtherSix.getResponse().getContentAsString();        System.out.println("=====useToy result:" + resultOtherSix);    }    @Test    public void deleteUseToy() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/empty/useToy")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("module","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====deleteUseToy mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====deleteUseToy result:" + result);        ResultActions resultActionsOther = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/empty/useToy")                        .param("token",token)                        .param("module","1")                );        MvcResult mvcResultOther = resultActionsOther.andReturn();        System.out.println("=====deleteUseToy mvcResult:" + mvcResultOther.getResponse().getStatus());        String resultOther = mvcResultOther.getResponse().getContentAsString();        System.out.println("=====deleteUseToy result:" + resultOther);        ResultActions resultActionsOtherTwo = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/empty/useToy")                        .param("token",token)                        .param("module","5")                );        MvcResult mvcResultOtherTwo = resultActionsOtherTwo.andReturn();        System.out.println("=====deleteUseToy mvcResult:" + mvcResultOtherTwo.getResponse().getStatus());        String resultOtherTwo = mvcResultOtherTwo.getResponse().getContentAsString();        System.out.println("=====deleteUseToy result:" + resultOtherTwo);        ResultActions resultActionsOtherThree = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/empty/useToy")                        .param("token",tokenOther)                        .param("module","5")                );        MvcResult mvcResultOtherThree = resultActionsOtherThree.andReturn();        System.out.println("=====deleteUseToy mvcResult:" + mvcResultOtherThree.getResponse().getStatus());        String resultOtherThree = mvcResultOtherThree.getResponse().getContentAsString();        System.out.println("=====deleteUseToy result:" + resultOtherThree);    }}