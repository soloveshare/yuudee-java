package com.dkd.api;import com.dkd.XiaoyudiApplication;import net.sf.json.JSONObject;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.context.WebApplicationContext;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class TrainingResultControllerTest1 {    private final Logger logger = LoggerFactory.getLogger(TrainingResultControllerTest1.class);    private MockMvc mockMvc;    @Autowired    private TrainingResultController trainingResultController;    private String reqUrl = "/app/trainingResult";    private String loginReqUrl = "/app/user";    @Autowired    private WebApplicationContext webApplicationContext;    private  String token;    private  String mobile="16601145545";    @Before    public void setUp() throws Exception {//        this.mockMvc = MockMvcBuilders.standaloneSetup(trainingResultController).build();        this.mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(loginReqUrl + "/generalLogin")                        .param("phone",mobile)                        .param("password","123456")                        .param("qcellcoreId","1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====generalLogin result :" + result);        JSONObject jsonObject = JSONObject.fromObject(result);        String  tokenJson =  jsonObject.optString("data");        String parents =  JSONObject.fromObject(tokenJson).optString("parents");        token =  JSONObject.fromObject(parents).optString("token");        logger.info("=====generalLogin result token:" + token);    }    @After    public void tearDown() throws Exception {    }    @Test    public void addTrainingResult() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token)                        .param("coursewareId","1")//                        .param("groupId","1")                        .param("scene","1")                        .param("module","1")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult result:" + result);    }    @Test    public void addTrainingResult0() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "1")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "10")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult result:" + result);    }    @Test    public void addTrainingResult1() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token","")                        .param("coursewareId","1")                        .param("groupId","1")                        .param("scene","1")                        .param("module","1")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult1 result:" + result);    }    @Test    public void addTrainingResult2() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token)                        .param("coursewareId","")                        .param("groupId","1")                        .param("scene","1")                        .param("module","1")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult2 result:" + result);    }    @Test    public void addTrainingResult3() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token)                        .param("coursewareId","1")                        .param("groupId","1")                        .param("scene","1")                        .param("module","6")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult3 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult3 result:" + result);    }    @Test    public void addTrainingResult4() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token)                        .param("coursewareId","1")                        .param("scene","1")                        .param("module","6")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult4 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult4 result:" + result);    }    @Test    public void addTrainingResult5() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "3")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "10")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult5 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult5 result:" + result);    }    @Test    public void addTrainingResult6() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult6 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult6 result:" + result);    }    @Test    public void addTrainingResult7() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "0")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult7 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult7 result:" + result);    }    @Test    public void addTrainingResult8() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult8 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult8 result:" + result);    }    @Test    public void addTrainingResult9() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "4")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult9 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult9 result:" + result);    }    @Test    public void addTrainingResult10() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "3")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult10 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult10 result:" + result);    }    @Test    public void addTrainingResult11() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211984")                        .param("scene", "2")                        .param("module", "3")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult11 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult11 result:" + result);    }    @Test    public void addTrainingResult12() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "4")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult12 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult12 result:" + result);    }    @Test    public void addTrainingResult13() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211984")                        .param("scene", "2")                        .param("module", "3")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult13 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult13 result:" + result);    }    @Test    public void addTrainingResult14() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", "1111111")                        .param("coursewareId", "1")                        .param("groupId", "211984")                        .param("scene", "2")                        .param("module", "3")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult14 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult14 result:" + result);    }    @Test    public void addTrainingResult15() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211984")                        .param("scene", "2")                        .param("module", "3")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult15 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult15 result:" + result);    }    @Test    public void addTrainingResult16() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult16 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult16 result:" + result);    }    @Test    public void addTrainingResult17() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211984")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult17 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult17 result:" + result);    }    @Test    public void addTrainingResult18() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211994")                        .param("scene", "2")                        .param("module", "4")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult18 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult18 result:" + result);    }    @Test    public void addTrainingResult19() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "黄桃黄桃黄桃黄桃黄桃黄桃黄桃黄桃黄桃黄桃黄桃")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult19 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult19 result:" + result);    }    @Test    public void addTrainingResult20() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211994")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "aaa")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult20 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult20 result:" + result);    }    @Test    public void addTrainingResult21() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211930")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "aaa")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult21 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult21 result:" + result);    }}