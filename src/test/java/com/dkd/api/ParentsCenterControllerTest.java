package com.dkd.api;import com.dkd.XiaoyudiApplication;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class ParentsCenterControllerTest {    private final Logger logger = LoggerFactory.getLogger(ParentsCenterControllerTest.class);    private MockMvc mockMvc;    @Autowired    private ParentsCenterController parentsCenterController;    private String reqUrl = "/app/parents";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(parentsCenterController).build();    }    @After    public void tearDown() throws Exception {    }    @Test    public void mxgTest() throws Exception{    }    @Test    public void parentsToAssess() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toAssess")                        .param("token","8SEiqmYxvXqiOIo/qkpsmw==")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====parentsToAssess mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====parentsToAssess result:" + result);    }    @Test    public void trainingRecords() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/training/records")                        .param("token","8SEiqmYxvXqiOIo/qkpsmw==")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====trainingRecords mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====trainingRecords result:" + result);    }    @Test    public void addRecord() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addRecord")                        .param("token","8SEiqmYxvXqiOIo/qkpsmw==")                        .param("type","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addRecord mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addRecord result:" + result);    }}