package com.dkd.api;import com.dkd.XiaoyudiApplication;import net.sf.json.JSONObject;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.context.WebApplicationContext;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class ParentsCenterControllerTest {    private final Logger logger = LoggerFactory.getLogger(ParentsCenterControllerTest.class);    private MockMvc mockMvc;    private String reqUrl = "/app/parents";    private String loginReqUrl = "/app/user";    @Autowired    private WebApplicationContext webApplicationContext;    private  String token;    private  String mobile="18564656666";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(loginReqUrl + "/generalLogin")                        .param("phone",mobile)                        .param("password","123456")                        .param("qcellcoreId","1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====generalLogin result :" + result);        JSONObject jsonObject = JSONObject.fromObject(result);        String  tokenJson =  jsonObject.optString("data");        String parents =  JSONObject.fromObject(tokenJson).optString("parents");        token =  JSONObject.fromObject(parents).optString("token");        logger.info("=====generalLogin result token:" + token);    }    @After    public void tearDown() throws Exception {    }    @Test    public void mxgTest() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/test")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====mxgTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====mxgTest result:" + result);    }    @Test    public void parentsToAssess() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toAssess")                        .param("token","")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====parentsToAssess mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====parentsToAssess result:" + result);    }    @Test    public void parentsToAssess1() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toAssess")                        .param("token",token)                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====parentsToAssess mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====parentsToAssess result:" + result);    }    @Test    public void trainingRecords() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/training/records")                        .param("token","")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====trainingRecords mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====trainingRecords result:" + result);    }    @Test    public void trainingRecords1() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/training/records")                        .param("token",token)                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====trainingRecords mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====trainingRecords result:" + result);    }    @Test    public void addRecord() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addRecord")                        .param("token","")                        .param("type","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addRecord mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addRecord result:" + result);    }    @Test    public void addRecord1() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addRecord")                        .param("token",token)                        .param("type","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addRecord mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addRecord result:" + result);    }}