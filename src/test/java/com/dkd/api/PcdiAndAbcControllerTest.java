package com.dkd.api;import com.dkd.XiaoyudiApplication;import com.google.gson.Gson;import net.sf.json.JSONObject;import org.apache.catalina.connector.Response;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.Mockito;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.context.WebApplicationContext;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import static junit.framework.TestCase.assertTrue;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class PcdiAndAbcControllerTest {    private final Logger logger = LoggerFactory.getLogger(PcdiAndAbcControllerTest.class);    private MockMvc mockMvc;    @Autowired    private WebApplicationContext webApplicationContext;    @Autowired    private PcdiAndAbcController pcdiAndAbcController;    private String reqUrl = "/app/question";    private String loginReqUrl = "/app/user";    private  String token;    private  String mobile="18564656666";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(pcdiAndAbcController).build();        this.mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.post(loginReqUrl + "/generalLogin")                        .param("phone",mobile)                        .param("password","123456")                        .param("qcellcoreId","1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====generalLogin result :" + result);        JSONObject jsonObject = JSONObject.fromObject(result);        String  tokenJson =  jsonObject.optString("data");        String parents =  JSONObject.fromObject(tokenJson).optString("parents");        token =  JSONObject.fromObject(parents).optString("token");        logger.info("=====generalLogin result token:" + token);    }    @After    public void tearDown() throws Exception {    }    @Test    public void getGradeRule() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/gradeRule")                        .param("type","1")                        .param("isOptional","1")                        .param("topicType","2")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getGradeRule mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getGradeRule result:" + result);    }    @Test    public void getGradeRuleOne() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/gradeRule")                        .param("type","2")                        .param("isOptional","2")                        .param("topicType","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getGradeRuleOne mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getGradeRuleOne result:" + result);    }    @Test    public void toPcdiMustPage() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/must")                        .param("token",token)                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toPcdiMustPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toPcdiMustPage result:" + result);        ResultActions resultActionsOther = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/must")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                );        MvcResult mvcResultOther = resultActionsOther.andReturn();        System.out.println("=====toPcdiMustPage mvcResult:" + mvcResultOther.getResponse().getStatus());        String resultOther = mvcResultOther.getResponse().getContentAsString();        System.out.println("=====toPcdiMustPage result:" + resultOther);        ResultActions resultActionsOtherTwo = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/must")                        .param("token","")                );        MvcResult mvcResultOtherTwo = resultActionsOtherTwo.andReturn();        System.out.println("=====toPcdiMustPage mvcResult:" + mvcResultOtherTwo.getResponse().getStatus());        String resultOtherTwo = mvcResultOtherTwo.getResponse().getContentAsString();        System.out.println("=====toPcdiMustPage result:" + resultOtherTwo);    }    @Test    public void mustAndResultPage() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/mustAndResult")                        .param("token","")                        .param("answerId","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====mustAndResultPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====mustAndResultPage result:" + result);        ResultActions resultActionsOther = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/mustAndResult")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("answerId","")                );        MvcResult mvcResultOther = resultActionsOther.andReturn();        System.out.println("=====mustAndResultPage mvcResult:" + mvcResultOther.getResponse().getStatus());        String resultOther = mvcResultOther.getResponse().getContentAsString();        System.out.println("=====mustAndResultPage result:" + resultOther);        ResultActions resultActionsOtherTwo = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/mustAndResult")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("answerId","1")                );        MvcResult mvcResultOtherTwo = resultActionsOtherTwo.andReturn();        System.out.println("=====mustAndResultPage mvcResult:" + mvcResultOtherTwo.getResponse().getStatus());        String resultOtherTwo = mvcResultOtherTwo.getResponse().getContentAsString();        System.out.println("=====mustAndResultPage result:" + resultOtherTwo);        ResultActions resultActionsOtherThree = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/mustAndResult")                        .param("token",token)                        .param("answerId","390")                );        MvcResult mvcResultOtherThree = resultActionsOtherThree.andReturn();        System.out.println("=====mustAndResultPage mvcResult:" + mvcResultOtherThree.getResponse().getStatus());        String resultOtherThree = mvcResultOtherThree.getResponse().getContentAsString();        System.out.println("=====mustAndResultPage result:" + resultOtherThree);        ResultActions resultActionsOtherFour = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/mustAndResult")                        .param("token",token)                        .param("answerId","1")                );        MvcResult mvcResultOtherFour = resultActionsOtherFour.andReturn();        System.out.println("=====mustAndResultPage mvcResult:" + mvcResultOtherFour.getResponse().getStatus());        String resultOtherFour = mvcResultOtherFour.getResponse().getContentAsString();        System.out.println("=====mustAndResultPage result:" + resultOtherFour);    }    @Test    public void toPcdiOptionalPage() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/optional")                        .param("token","")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toPcdiOptionalPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toPcdiOptionalPage result:" + result);        ResultActions resultActionsOther = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/optional")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                );        MvcResult mvcResultOther = resultActionsOther.andReturn();        System.out.println("=====toPcdiOptionalPage mvcResult:" + mvcResultOther.getResponse().getStatus());        String resultOther = mvcResultOther.getResponse().getContentAsString();        System.out.println("=====toPcdiOptionalPage result:" + resultOther);        ResultActions resultActionsOtherTwo = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/optional")                        .param("token",token)                );        MvcResult mvcResultOtherTwo = resultActionsOtherTwo.andReturn();        System.out.println("=====toPcdiOptionalPage mvcResult:" + mvcResultOtherTwo.getResponse().getStatus());        String resultOtherTwo = mvcResultOtherTwo.getResponse().getContentAsString();        System.out.println("=====toPcdiOptionalPage result:" + resultOtherTwo);    }    @Test    public void optionalAndResult() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/optionalAndResult")                        .param("token","")                        .param("answerId","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====optionalAndResult mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====optionalAndResult result:" + result);        ResultActions resultActionsOther = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/optionalAndResult")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("answerId","")                );        MvcResult mvcResultOther = resultActionsOther.andReturn();        System.out.println("=====optionalAndResult mvcResult:" + mvcResultOther.getResponse().getStatus());        String resultOther = mvcResultOther.getResponse().getContentAsString();        System.out.println("=====optionalAndResult result:" + resultOther);        ResultActions resultActionsOtherTwo = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/optionalAndResult")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("answerId","1")                );        MvcResult mvcResultOtherTwo = resultActionsOtherTwo.andReturn();        System.out.println("=====optionalAndResult mvcResult:" + mvcResultOtherTwo.getResponse().getStatus());        String resultOtherTwo = mvcResultOtherTwo.getResponse().getContentAsString();        System.out.println("=====optionalAndResult result:" + resultOtherTwo);        ResultActions resultActionsOtherThree = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/optionalAndResult")                        .param("token",token)                        .param("answerId","1")                );        MvcResult mvcResultOtherThree = resultActionsOtherThree.andReturn();        System.out.println("=====optionalAndResult mvcResult:" + mvcResultOtherThree.getResponse().getStatus());        String resultOtherThree = mvcResultOtherThree.getResponse().getContentAsString();        System.out.println("=====optionalAndResult result:" + resultOtherThree);        ResultActions resultActionsOtherFour = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getPcdi/optionalAndResult")                        .param("token",token)                        .param("answerId","368")                );        MvcResult mvcResultOtherFour = resultActionsOtherFour.andReturn();        System.out.println("=====optionalAndResult mvcResult:" + mvcResultOtherFour.getResponse().getStatus());        String resultOtherFour = mvcResultOtherFour.getResponse().getContentAsString();        System.out.println("=====optionalAndResult result:" + resultOtherFour);    }    @Test    public void getABC() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getABC")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getABC mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getABC result:" + result);    }    @Test    public void getABCoutResult() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getABC/outResult")                        .param("token","")                        .param("answerId","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getABCoutResult mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getABCoutResult result:" + result);        ResultActions resultActionsOther = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getABC/outResult")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("answerId","")                );        MvcResult mvcResultOther = resultActionsOther.andReturn();        System.out.println("=====getABCoutResult mvcResult:" + mvcResultOther.getResponse().getStatus());        String resultOther = mvcResultOther.getResponse().getContentAsString();        System.out.println("=====getABCoutResult result:" + resultOther);        ResultActions resultActionsOtherTwo = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getABC/outResult")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("answerId","1")                );        MvcResult mvcResultOtherTwo = resultActionsOtherTwo.andReturn();        System.out.println("=====getABCoutResult mvcResult:" + mvcResultOtherTwo.getResponse().getStatus());        String resultOtherTwo = mvcResultOtherTwo.getResponse().getContentAsString();        System.out.println("=====getABCoutResult result:" + resultOtherTwo);        ResultActions resultActionsOtherThree = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getABC/outResult")                        .param("token",token)                        .param("answerId","1")                );        MvcResult mvcResultOtherThree = resultActionsOtherThree.andReturn();        System.out.println("=====getABCoutResult mvcResult:" + mvcResultOtherThree.getResponse().getStatus());        String resultOtherThree = mvcResultOtherThree.getResponse().getContentAsString();        System.out.println("=====getABCoutResult result:" + resultOtherThree);        ResultActions resultActionsOtherFour = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getABC/outResult")                        .param("token",token)                        .param("answerId","368")                );        MvcResult mvcResultOtherFour = resultActionsOtherFour.andReturn();        System.out.println("=====getABCoutResult mvcResult:" + mvcResultOtherFour.getResponse().getStatus());        String resultOtherFour = mvcResultOtherFour.getResponse().getContentAsString();        System.out.println("=====getABCoutResult result:" + resultOtherFour);    }    @Test    public void addPcdiResult() throws Exception{        List lists= new ArrayList();        List<Map<String ,Object>> list = new ArrayList<>();        Map<String,Object> map = new HashMap<>();        map.put("1",455);        list.add(map);        Gson gson =new Gson();        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addPcdiResult")                        .param("token","")                        .param("score","")                        .param("nounCount","")                        .param("verbCount","")                        .param("adjCount","")                        .param("pcdiCache","")                        .param("resultList", gson.toJson(lists))                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addPcdiResult mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addPcdiResult result:" + result);        ResultActions resultActionsOther = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addPcdiResult")                        .param("token","")                        .param("score","60")                        .param("nounCount","3")                        .param("verbCount","5")                        .param("adjCount","7")                        .param("pcdiCache","true")                        .param("resultList", gson.toJson(list))                );        MvcResult mvcResultOther = resultActionsOther.andReturn();        System.out.println("=====addPcdiResult mvcResult:" + mvcResultOther.getResponse().getStatus());        String resultOther = mvcResultOther.getResponse().getContentAsString();        System.out.println("=====addPcdiResult result:" + resultOther);        ResultActions resultActionsOtherTwo = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addPcdiResult")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("score","60")                        .param("nounCount","3")                        .param("verbCount","5")                        .param("adjCount","7")                        .param("pcdiCache","true")                        .param("resultList", gson.toJson(list))                );        MvcResult mvcResultOtherTwo = resultActionsOtherTwo.andReturn();        System.out.println("=====addPcdiResult mvcResult:" + mvcResultOtherTwo.getResponse().getStatus());        String resultOtherTwo = mvcResultOtherTwo.getResponse().getContentAsString();        System.out.println("=====addPcdiResult result:" + resultOtherTwo);        ResultActions resultActionsOtherThree = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addPcdiResult")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("score","60")                        .param("nounCount","3")                        .param("verbCount","5")                        .param("adjCount","7")                        .param("pcdiCache","true")                        .param("resultList", gson.toJson(list))                );        MvcResult mvcResultOtherThree = resultActionsOtherThree.andReturn();        System.out.println("=====addPcdiResult mvcResult:" + mvcResultOtherThree.getResponse().getStatus());        String resultOtherThree = mvcResultOtherThree.getResponse().getContentAsString();        System.out.println("=====addPcdiResult result:" + resultOtherThree);        ResultActions resultActionsOtherFour = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addPcdiResult")                        .param("token",token)                        .param("score","60")                        .param("nounCount","5")                        .param("verbCount","5")                        .param("adjCount","7")                        .param("pcdiCache","true")                        .param("resultList", gson.toJson(list))                );        MvcResult mvcResultOtherFour = resultActionsOtherFour.andReturn();        System.out.println("=====addPcdiResult mvcResult:" + mvcResultOtherFour.getResponse().getStatus());        String resultOtherFour = mvcResultOtherFour.getResponse().getContentAsString();        System.out.println("=====addPcdiResult result:" + resultOtherFour);        ResultActions resultActionsOtherFive = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addPcdiResult")                        .param("token",token)                        .param("score","60")                        .param("nounCount","")                        .param("verbCount","1")                        .param("adjCount","1")                        .param("pcdiCache","false")                        .param("resultList", gson.toJson(list))                );        MvcResult mvcResultOtherFive = resultActionsOtherFive.andReturn();        System.out.println("=====addPcdiResult mvcResult:" + mvcResultOtherFive.getResponse().getStatus());        String resultOtherFive = mvcResultOtherFive.getResponse().getContentAsString();        System.out.println("=====addPcdiResult result:" + resultOtherFive);        ResultActions resultActionsOtherSix = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addPcdiResult")                        .param("token",token)                        .param("score","60")                        .param("nounCount","1")                        .param("verbCount","1")                        .param("adjCount","1")                        .param("pcdiCache","false")                        .param("resultList", gson.toJson(list))                );        MvcResult mvcResultOtherSix = resultActionsOtherSix.andReturn();        System.out.println("=====addPcdiResult mvcResult:" + mvcResultOtherSix.getResponse().getStatus());        String resultOtherSix = mvcResultOtherSix.getResponse().getContentAsString();        System.out.println("=====addPcdiResult result:" + resultOtherSix);    }    @Test    public void addPcdiOutResult() throws Exception{        List<Map<String ,Object>> list = new ArrayList<>();        Map<String,Object> map = new HashMap<>();        map.put("1",455);        list.add(map);        Gson gson =new Gson();        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addPcdiOutResult")                        .param("token","")                        .param("resultList",gson.toJson(list))                        .param("mustId","1")                        .param("count","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addPcdiOutResult mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addPcdiOutResult result:" + result);        ResultActions resultActionsOther = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addPcdiOutResult")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("resultList",gson.toJson(list))                        .param("mustId","")                        .param("count","1")                );        MvcResult mvcResultOther = resultActionsOther.andReturn();        System.out.println("=====addPcdiOutResult mvcResult:" + mvcResultOther.getResponse().getStatus());        String resultOther = mvcResultOther.getResponse().getContentAsString();        System.out.println("=====addPcdiOutResult result:" + resultOther);        ResultActions resultActionsOtherTwo = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addPcdiOutResult")                        .param("token",token)                        .param("resultList",gson.toJson(list))                        .param("mustId","1")                        .param("count","1")                );        MvcResult mvcResultOtherTwo = resultActionsOtherTwo.andReturn();        System.out.println("=====addPcdiOutResult mvcResult:" + mvcResultOtherTwo.getResponse().getStatus());        String resultOtherTwo = mvcResultOtherTwo.getResponse().getContentAsString();        System.out.println("=====addPcdiOutResult result:" + resultOtherTwo);        ResultActions resultActionsOtherThree = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addPcdiOutResult")                        .param("token",token)                        .param("resultList",gson.toJson(list))                        .param("mustId","343")                        .param("count","1")                );        MvcResult mvcResultOtherThree = resultActionsOtherThree.andReturn();        System.out.println("=====addPcdiOutResult mvcResult:" + mvcResultOtherThree.getResponse().getStatus());        String resultOtherThree = mvcResultOtherThree.getResponse().getContentAsString();        System.out.println("=====addPcdiOutResult result:" + resultOtherThree);    }    @Test    public void addABCResult() throws Exception{        List<Map<String ,Object>> list = new ArrayList<>();        Map<String,Object> map = new HashMap<>();        map.put("1",455);        list.add(map);        Gson gson =new Gson();        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addABCResult")                        .param("token","")                        .param("score","60")                        .param("resultList",gson.toJson(list))                        .param("pcdiCache","true")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addABCResult mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addABCResult result:" + result);        ResultActions resultActionsOther = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addABCResult")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("score","60")                        .param("resultList","")                        .param("pcdiCache","true")                );        MvcResult mvcResultOther = resultActionsOther.andReturn();        System.out.println("=====addABCResult mvcResult:" + mvcResultOther.getResponse().getStatus());        String resultOther = mvcResultOther.getResponse().getContentAsString();        System.out.println("=====addABCResult result:" + resultOther);        ResultActions resultActionsOtherTwo = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addABCResult")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("score","60")                        .param("resultList","")                        .param("pcdiCache","true")                );        MvcResult mvcResultOtherTwo = resultActionsOtherTwo.andReturn();        System.out.println("=====addABCResult mvcResult:" + mvcResultOtherTwo.getResponse().getStatus());        String resultOtherTwo = mvcResultOtherTwo.getResponse().getContentAsString();        System.out.println("=====addABCResult result:" + resultOtherTwo);        ResultActions resultActionsOtherThree = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addABCResult")                        .param("token",token)                        .param("score","60")                        .param("resultList",gson.toJson(list))                        .param("pcdiCache","true")                );        MvcResult mvcResultOtherThree = resultActionsOtherThree.andReturn();        System.out.println("=====addABCResult mvcResult:" + mvcResultOtherThree.getResponse().getStatus());        String resultOtherThree = mvcResultOtherThree.getResponse().getContentAsString();        System.out.println("=====addABCResult result:" + resultOtherThree);        ResultActions resultActionsOtherFour = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addABCResult")                        .param("token",token)                        .param("score","60")                        .param("resultList",gson.toJson(list))                        .param("pcdiCache","false")                );        MvcResult mvcResultOtherFour = resultActionsOtherFour.andReturn();        System.out.println("=====addABCResult mvcResult:" + mvcResultOtherFour.getResponse().getStatus());        String resultOtherFour = mvcResultOtherFour.getResponse().getContentAsString();        System.out.println("=====addABCResult result:" + resultOtherFour);    }    @Test    public void getRePortInfo() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getReportInfo")                        .param("token","")                        .param("type","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getRePortInfo mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getRePortInfo result:" + result);        ResultActions resultActionsOther = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getReportInfo")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("type","")                );        MvcResult mvcResultOther = resultActionsOther.andReturn();        System.out.println("=====getRePortInfo mvcResult:" + mvcResultOther.getResponse().getStatus());        String resultOther = mvcResultOther.getResponse().getContentAsString();        System.out.println("=====getRePortInfo result:" + resultOther);        ResultActions resultActionsOtherTwo = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getReportInfo")                        .param("token",token)                        .param("type","1")                );        MvcResult mvcResultOtherTwo = resultActionsOtherTwo.andReturn();        System.out.println("=====getRePortInfo mvcResult:" + mvcResultOtherTwo.getResponse().getStatus());        String resultOtherTwo = mvcResultOtherTwo.getResponse().getContentAsString();        System.out.println("=====getRePortInfo result:" + resultOtherTwo);        ResultActions resultActionsOtherThree = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getReportInfo")                        .param("token",token)                        .param("type","5")                );        MvcResult mvcResultOtherThree = resultActionsOtherThree.andReturn();        System.out.println("=====getRePortInfo mvcResult:" + mvcResultOtherThree.getResponse().getStatus());        String resultOtherThree = mvcResultOtherThree.getResponse().getContentAsString();        System.out.println("=====getRePortInfo result:" + resultOtherThree);    }    @Test    public void getList() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl+"/getCache")                        .param("token","")                        .param("type","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getList result:" + result);        ResultActions resultActionsOther = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl+"/getCache")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("type","")                );        MvcResult mvcResultOther = resultActionsOther.andReturn();        System.out.println("=====getList mvcResult:" + mvcResultOther.getResponse().getStatus());        String resultOther = mvcResultOther.getResponse().getContentAsString();        System.out.println("=====getList result:" + resultOther);        ResultActions resultActionsOtherTwo = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl+"/getCache")                        .param("token",token)                        .param("type","1")                );        MvcResult mvcResultOtherTwo = resultActionsOtherTwo.andReturn();        System.out.println("=====getList mvcResult:" + mvcResultOtherTwo.getResponse().getStatus());        String resultOtherTwo = mvcResultOtherTwo.getResponse().getContentAsString();        System.out.println("=====getList result:" + resultOtherTwo);        ResultActions resultActionsOtherThree = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl+"/getCache")                        .param("token",token)                        .param("type","3")                );        MvcResult mvcResultOtherThree = resultActionsOtherThree.andReturn();        System.out.println("=====getList mvcResult:" + mvcResultOtherThree.getResponse().getStatus());        String resultOtherThree = mvcResultOtherThree.getResponse().getContentAsString();        System.out.println("=====getList result:" + resultOtherThree);        ResultActions resultActionsOtherFour = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl+"/getCache")                        .param("token","sK5bS68IyDHn3LcmtEoUoA==")                        .param("type","3")                );        MvcResult mvcResultOtherFour = resultActionsOtherFour.andReturn();        System.out.println("=====getList mvcResult:" + mvcResultOtherFour.getResponse().getStatus());        String resultOtherFour = mvcResultOtherFour.getResponse().getContentAsString();        System.out.println("=====getList result:" + resultOtherFour);    }}