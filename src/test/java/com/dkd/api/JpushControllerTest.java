package com.dkd.api;import com.dkd.XiaoyudiApplication;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.context.WebApplicationContext;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class JpushControllerTest {    private MockMvc mockMvc;    private String reqUrl="/app/jpush";    @Autowired    private WebApplicationContext webApplicationContext;    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();    }    @Test    public void pushMsgError() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/pushMsg")                        .param("type","type")                        .param("alert","")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====pushMsgError mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====pushMsgError result:" + result);    }    @Test    public void pushMsgErrortype() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/pushMsg")                        .param("type","tag")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====pushMsgErrortype mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====pushMsgErrortype result:" + result);    }    @Test    public void pushMsgOk() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/pushMsg")                        .param("alert","1")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====pushMsgOk mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====pushMsgOk result:" + result);    }}