package com.dkd.api;import com.dkd.XiaoyudiApplication;import com.dkd.common.utils.RedisService;import net.sf.json.JSONObject;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.context.WebApplicationContext;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class TrainingResultControllerTest {    private final Logger logger = LoggerFactory.getLogger(TrainingResultControllerTest.class);    private MockMvc mockMvc;    @Autowired    private TrainingResultController trainingResultController;    @Autowired    private RedisService redisService;    private String reqUrl = "/app/trainingResult";    private String loginReqUrl = "/app/user";    @Autowired    private WebApplicationContext webApplicationContext;    private String token;    private String token1;    private String token2;    private String token3;    private String token4;    private String token5;    private String mobile="18564656666";    private String mobile1="16601145545";    private String mobile2="13473004256";    private String mobile3="13134591150";    private String mobile4="13754686354";    private String mobile5="15712896525";    @Before    public void setUp() throws Exception {//        this.mockMvc = MockMvcBuilders.standaloneSetup(trainingResultController).build();        this.mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();        String tokenCacheKey = mobile;        Object tokenObj = redisService.get(tokenCacheKey);        if(tokenObj == null){            ResultActions resultActions = this.mockMvc.                    perform(MockMvcRequestBuilders.post(loginReqUrl + "/generalLogin")                            .param("phone",mobile)                            .param("password","123456")                            .param("qcellcoreId","1")                    );            MvcResult mvcResult = resultActions.andReturn();            logger.info("=====generalLogin mvcResult:" + mvcResult.getResponse().getStatus());            String result = mvcResult.getResponse().getContentAsString();            logger.info("=====generalLogin result :" + result);            JSONObject jsonObject = JSONObject.fromObject(result);            String  tokenJson =  jsonObject.optString("data");            String parents =  JSONObject.fromObject(tokenJson).optString("parents");            token =  JSONObject.fromObject(parents).optString("token");            logger.info("=====generalLogin result token:" + token);            redisService.set(tokenCacheKey,token,24*60*60L);        }else {            System.err.println("已登录"+tokenCacheKey+":"+tokenObj);            token = String.valueOf(tokenObj);        }        String tokenCacheKey1 =  mobile1;        Object tokenObj1 = redisService.get(tokenCacheKey1);        if(tokenObj1 == null){            ResultActions resultActions1 = mockMvc.                    perform(MockMvcRequestBuilders.post(loginReqUrl + "/generalLogin")                            .param("phone",mobile1)                            .param("password","123456")                            .param("qcellcoreId","1")                    );            MvcResult mvcResult1 = resultActions1.andReturn();            logger.info("=====generalLogin mvcResult:" + mvcResult1.getResponse().getStatus());            String result1 = mvcResult1.getResponse().getContentAsString();            logger.info("=====generalLogin result :" + result1);            JSONObject jsonObject1 = JSONObject.fromObject(result1);            String  tokenJson1 =  jsonObject1.optString("data");            String parents1 =  JSONObject.fromObject(tokenJson1).optString("parents");            token1 =  JSONObject.fromObject(parents1).optString("token");            logger.info("=====generalLogin result token:" + token1);            redisService.set(tokenCacheKey1,token1,24*60*60L);        }else {            System.err.println("已登录"+tokenCacheKey1+":"+tokenObj1);            token1 = String.valueOf(tokenObj1);        }        String tokenCacheKey2 = mobile2;        Object tokenObj2 = redisService.get(tokenCacheKey2);        if(tokenObj2 == null) {            ResultActions resultActions2 = mockMvc.                    perform(MockMvcRequestBuilders.post(loginReqUrl + "/generalLogin")                            .param("phone", mobile2)                            .param("password", "123456")                            .param("qcellcoreId", "1")                    );            MvcResult mvcResult2 = resultActions2.andReturn();            logger.info("=====generalLogin mvcResult:" + mvcResult2.getResponse().getStatus());            String result2 = mvcResult2.getResponse().getContentAsString();            logger.info("=====generalLogin result :" + result2);            JSONObject jsonObject2 = JSONObject.fromObject(result2);            String tokenJson2 = jsonObject2.optString("data");            String parents2 = JSONObject.fromObject(tokenJson2).optString("parents");            token2 = JSONObject.fromObject(parents2).optString("token");            logger.info("=====generalLogin result token:" + token2);            redisService.set(tokenCacheKey2,token2,24*60*60L);        }else {            System.err.println("已登录"+tokenCacheKey2+":"+tokenObj2);            token2 = String.valueOf(tokenObj2);        }        String tokenCacheKey3 = mobile3;        Object tokenObj3 = redisService.get(tokenCacheKey3);        if(tokenObj3 == null) {            ResultActions resultActions3 = mockMvc.                    perform(MockMvcRequestBuilders.post(loginReqUrl + "/generalLogin")                            .param("phone", mobile3)                            .param("password", "123456")                            .param("qcellcoreId", "1")                    );            MvcResult mvcResult3 = resultActions3.andReturn();            logger.info("=====generalLogin mvcResult:" + mvcResult3.getResponse().getStatus());            String result3 = mvcResult3.getResponse().getContentAsString();            logger.info("=====generalLogin result :" + result3);            JSONObject jsonObject3 = JSONObject.fromObject(result3);            String tokenJson3 = jsonObject3.optString("data");            String parents3 = JSONObject.fromObject(tokenJson3).optString("parents");            token3 = JSONObject.fromObject(parents3).optString("token");            logger.info("=====generalLogin result token:" + token3);            redisService.set(tokenCacheKey3,token3,24*60*60L);        }else {            System.err.println("已登录"+tokenCacheKey3+":"+tokenObj3);            token3 = String.valueOf(tokenObj3);        }        String tokenCacheKey4 = mobile4;        Object tokenObj4 = redisService.get(tokenCacheKey4);        if(tokenObj4 == null) {            ResultActions resultActions4 = mockMvc.                    perform(MockMvcRequestBuilders.post(loginReqUrl + "/generalLogin")                            .param("phone", mobile4)                            .param("password", "123456")                            .param("qcellcoreId", "1")                    );            MvcResult mvcResult4 = resultActions4.andReturn();            logger.info("=====generalLogin mvcResult:" + mvcResult4.getResponse().getStatus());            String result4 = mvcResult4.getResponse().getContentAsString();            logger.info("=====generalLogin result :" + result4);            JSONObject jsonObject4 = JSONObject.fromObject(result4);            String tokenJson4 = jsonObject4.optString("data");            String parents4 = JSONObject.fromObject(tokenJson4).optString("parents");            token4 = JSONObject.fromObject(parents4).optString("token");            logger.info("=====generalLogin result token:" + token4);            redisService.set(tokenCacheKey4,token4,24*60*60L);        }else {            System.err.println("已登录"+tokenCacheKey4+":"+tokenObj4);            token4 = String.valueOf(tokenObj4);        }        String tokenCacheKey5 = mobile5;        Object tokenObj5 = redisService.get(tokenCacheKey5);        if(tokenObj5 == null) {            ResultActions resultActions5 = mockMvc.                    perform(MockMvcRequestBuilders.post(loginReqUrl + "/generalLogin")                            .param("phone", mobile5)                            .param("password", "123456")                            .param("qcellcoreId", "1")                    );            MvcResult mvcResult5 = resultActions5.andReturn();            logger.info("=====generalLogin mvcResult:" + mvcResult5.getResponse().getStatus());            String result5 = mvcResult5.getResponse().getContentAsString();            logger.info("=====generalLogin result :" + result5);            JSONObject jsonObject5 = JSONObject.fromObject(result5);            String tokenJson5 = jsonObject5.optString("data");            String parents5 = JSONObject.fromObject(tokenJson5).optString("parents");            token5 = JSONObject.fromObject(parents5).optString("token");            logger.info("=====generalLogin result token:" + token5);            redisService.set(tokenCacheKey5,token5,24*60*60L);        }else {            System.err.println("已登录"+tokenCacheKey5+":"+tokenObj5);            token5 = String.valueOf(tokenObj5);        }    }    @After    public void tearDown() throws Exception {    }    @Test    public void addTrainingResult() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token)                        .param("coursewareId","1")//                        .param("groupId","1")                        .param("scene","1")                        .param("module","1")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult result:" + result);    }    @Test    public void addTrainingResult0() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "1")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "10")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult result:" + result);    }    @Test    public void addTrainingResult1() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token","")                        .param("coursewareId","1")                        .param("groupId","1")                        .param("scene","1")                        .param("module","1")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult1 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult1 result:" + result);    }    @Test    public void addTrainingResult2() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token)                        .param("coursewareId","")                        .param("groupId","1")                        .param("scene","1")                        .param("module","1")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult2 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult2 result:" + result);    }    @Test    public void addTrainingResult3() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token)                        .param("coursewareId","1")                        .param("groupId","1")                        .param("scene","1")                        .param("module","6")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult3 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult3 result:" + result);    }    @Test    public void addTrainingResult4() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token)                        .param("coursewareId","1")                        .param("scene","1")                        .param("module","6")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult4 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult4 result:" + result);    }    @Test    public void addTrainingResult5() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "3")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "10")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult5 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult5 result:" + result);    }    @Test    public void addTrainingResult6() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult6 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult6 result:" + result);    }    @Test    public void addTrainingResult7() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "0")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult7 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult7 result:" + result);    }    @Test    public void addTrainingResult8() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult8 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult8 result:" + result);    }    @Test    public void addTrainingResult9() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "4")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult9 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult9 result:" + result);    }    @Test    public void addTrainingResult10() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "3")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult10 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult10 result:" + result);    }    @Test    public void addTrainingResult11() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211984")                        .param("scene", "2")                        .param("module", "3")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult11 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult11 result:" + result);    }    @Test    public void addTrainingResult12() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "4")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult12 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult12 result:" + result);    }    @Test    public void addTrainingResult13() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211984")                        .param("scene", "2")                        .param("module", "3")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult13 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult13 result:" + result);    }    @Test    public void addTrainingResult14() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", "1111111")                        .param("coursewareId", "1")                        .param("groupId", "211984")                        .param("scene", "2")                        .param("module", "3")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult14 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult14 result:" + result);    }    @Test    public void addTrainingResult15() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211984")                        .param("scene", "2")                        .param("module", "3")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult15 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult15 result:" + result);    }    @Test    public void addTrainingResult16() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult16 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult16 result:" + result);    }    @Test    public void addTrainingResult17() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211984")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult17 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult17 result:" + result);    }    @Test    public void addTrainingResult18() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211994")                        .param("scene", "2")                        .param("module", "4")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult18 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult18 result:" + result);    }    @Test    public void addTrainingResult19() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "20641")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "")                        .param("errorType", "黄桃黄桃黄桃黄桃黄桃黄桃黄桃黄桃黄桃黄桃黄桃")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult19 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult19 result:" + result);    }    @Test    public void addTrainingResult20() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211994")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "aaa")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult20 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult20 result:" + result);    }    @Test    public void addTrainingResult21() throws Exception {        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST, reqUrl + "/addTrainingResult")                        .param("token", token)                        .param("coursewareId", "1")                        .param("groupId", "211930")                        .param("scene", "2")                        .param("module", "1")                        .param("startTime", "2018-02-21 10:10:10")                        .param("pass", "1")                        .param("stayTime", "12")                        .param("stayTimeList", "5,5,6,7")                        .param("disTurbName", "aaa")                        .param("errorType", "")                        .param("name", "黄桃")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult21 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult21 result:" + result);    }    @Test    public void addTrainingResult22() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                                .param("token",token1)                                .param("coursewareId","1")                                .param("groupId","211930")                                .param("scene","1")                                .param("module","1")                                .param("startTime","2018-02-21 10:10:10")                                .param("pass","1")                                .param("stayTime","10")                                .param("stayTimeList","5,5,6,7")                                .param("disTurbName","")                                .param("errorType","")                                .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult22 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult22 result:" + result);    }    @Test    public void addTrainingResult23() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token2)                        .param("coursewareId","1")                        .param("groupId","211930")                        .param("scene","2")                        .param("module","1")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult23 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult23 result:" + result);    }    @Test    public void addTrainingResult24() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token2)                        .param("coursewareId","1")                        .param("groupId","211930")                        .param("scene","2")                        .param("module","2")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult24 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult24 result:" + result);    }    @Test    public void addTrainingResult25() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token2)                        .param("coursewareId","1")                        .param("groupId","211930")                        .param("scene","2")                        .param("module","4")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult25 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult25 result:" + result);    }    @Test    public void addTrainingResult26() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token3)                        .param("coursewareId","1")                        .param("groupId","211930")                        .param("scene","2")                        .param("module","2")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult26 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult26 result:" + result);    }    @Test    public void addTrainingResult27() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token3)                        .param("coursewareId","1")                        .param("groupId","211930")                        .param("scene","2")                        .param("module","1")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult27 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult27 result:" + result);    }    @Test    public void addTrainingResult28() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token3)                        .param("coursewareId","1")                        .param("groupId","211930")                        .param("scene","2")                        .param("module","3")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult28 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult28 result:" + result);    }    @Test    public void addTrainingResult29() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                                .param("token",token)                                .param("coursewareId","1")                                .param("scene","1")                                .param("module","1")                                .param("startTime","2018-02-21 10:10:10")                                .param("pass","1")                                .param("stayTime","310")                                .param("stayTimeList","5,5,6,7")                                .param("disTurbName","")                                .param("errorType","")                                .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult29 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult29 result:" + result);    }    @Test    public void addTrainingResult30() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token4)                        .param("coursewareId","1")                        .param("groupId","211928")                        .param("scene","2")                        .param("module","1")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","310")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult30 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult30 result:" + result);    }    @Test    public void addTrainingResult31() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token4)                        .param("coursewareId","1")                        .param("groupId","211928")                        .param("scene","1")                        .param("module","1")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","310")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult31 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult31 result:" + result);    }    @Test    public void addTrainingResult32() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token5)                        .param("coursewareId","1")                        .param("groupId","212016")                        .param("scene","2")                        .param("module","1")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","310")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult32 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult32 result:" + result);    }    @Test    public void addTrainingResult33() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                        .param("token",token)                        .param("coursewareId","1")                        .param("groupId","1")//                        .param("scene","1")                        .param("module","6")                        .param("startTime","2018-02-21 10:10:10")                        .param("pass","1")                        .param("stayTime","10")                        .param("stayTimeList","5,5,6,7")                        .param("disTurbName","")                        .param("errorType","")                        .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult33 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult33 result:" + result);    }    @Test    public void addTrainingResult34() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                                .param("token",token)                                .param("coursewareId","1")                                .param("groupId","1")                                .param("scene","1")//                                .param("module","6")                                .param("startTime","2018-02-21 10:10:10")                                .param("pass","1")                                .param("stayTime","10")                                .param("stayTimeList","5,5,6,7")                                .param("disTurbName","")                                .param("errorType","")                                .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult34 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult34 result:" + result);    }    @Test    public void addTrainingResult35() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                                .param("token",token)                                .param("coursewareId","1")                                .param("groupId","1")                                .param("scene","1")                                .param("module","6")//                                .param("startTime","2018-02-21 10:10:10")                                .param("pass","1")                                .param("stayTime","10")                                .param("stayTimeList","5,5,6,7")                                .param("disTurbName","")                                .param("errorType","")                                .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult35 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult35 result:" + result);    }    @Test    public void addTrainingResult36() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                                .param("token",token)                                .param("coursewareId","1")                                .param("groupId","1")                                .param("scene","1")                                .param("module","6")                                .param("startTime","2018-02-21 10:10:10")                                .param("pass","1")//                                .param("stayTime","10")                                .param("stayTimeList","5,5,6,7")                                .param("disTurbName","")                                .param("errorType","")                                .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult36 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult36 result:" + result);    }    @Test    public void addTrainingResult37() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                                .param("token",token)                                .param("coursewareId","1")                                .param("groupId","1")                                .param("scene","1")                                .param("module","6")                                .param("startTime","2018-02-21 10:10:10")//                                .param("pass","1")                                .param("stayTime","10")                                .param("stayTimeList","5,5,6,7")                                .param("disTurbName","")                                .param("errorType","")                                .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult37 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult37 result:" + result);    }    @Test    public void addTrainingResult38() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addTrainingResult")                                .param("token",token)                                .param("coursewareId","1")                                .param("groupId","1")                                .param("scene","1")                                .param("module","6")                                .param("startTime","2018-02-21 10:10:10")                                .param("pass","1")                                .param("stayTime","10")                                .param("stayTimeList","5,5,6,7")                                .param("disTurbName","")                                .param("errorType","")//                                .param("name","男孩吃苹果")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addTrainingResult38 mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addTrainingResult38 result:" + result);    }}