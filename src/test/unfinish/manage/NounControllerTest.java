package com.dkd.manage;import com.dkd.XiaoyudiApplication;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class NounControllerTest {    private final Logger logger = LoggerFactory.getLogger(NounControllerTest.class);    private MockMvc mockMvc;    @Autowired    private NounController nounController;    private String reqUrl = "/manage/noun";    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(nounController).build();    }    @After    public void tearDown() throws Exception {    }    @Test    public void toNoumTrainingPage() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toNoumTrainingPage"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toNoumTrainingPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toNoumTrainingPage result:" + result);    }    @Test    public void toNoumTestPage() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toNoumTestPage"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toNoumTestPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toNoumTestPage result:" + result);    }    @Test    public void toNounSenseList() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toNounSensePage"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toNounSensePage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toNounSensePage result:" + result);    }    @Test    public void toAddNounTrainingPage() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toAddNounTrainingPage"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toAddNounTrainingPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toAddNounTrainingPage result:" + result);    }    @Test    public void toAddNounTestPage() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toAddNounTestPage"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toAddNounTestPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toAddNounTestPage result:" + result);    }    @Test    public void getImg() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getImg.html"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getImg mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getImg result:" + result);    }    @Test    public void toAddNounSensePage() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/toAddNounSensePage")                        .param("id","19")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====toAddNounSensePage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====toAddNounSensePage result:" + result);    }    @Test    public void setHelpTimes() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/setHelpTimes")                        .param("states1","xx")                        .param("states2","xx")                        .param("states3","xx")                        .param("states4","xx")                        .param("topicType","xx")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====setHelpTimes mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====setHelpTimes result:" + result);    }    @Test    public void getNounTrainingList() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getNounTrainingList")                        .param("start","1")                        .param("length","10")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getNounTrainingList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getNounTrainingList result:" + result);    }    @Test    public void addNounTraining() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addNounTraining")                        .param("wireChar","11")                        .param("colorPenChar","11")                        .param("groupWord","111")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addNounTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addNounTraining result:" + result);    }    @Test    public void updateNounTraining() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/updateNounTraining")                        .param("wireChar","11")                        .param("colorPenChar","11")                        .param("groupWord","111")                        .param("id","19")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====updateNounTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====updateNounTraining result:" + result);    }    @Test    public void nounTrainingDetail() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/NounTrainingDetail")                        .param("id","19"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====nounTrainingDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====nounTrainingDetail result:" + result);    }    @Test    public void deleteNounTraining() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/deleteNounTraining")                        .param("id","19"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====deleteNounTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====deleteNounTraining result:" + result);    }    @Test    public void getNounTestList() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getNounTestList")                        .param("start","1")                        .param("length","10")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getNounTestList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getNounTestList result:" + result);    }    @Test    public void addNounTest() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addNounTest")                        .param("cardColorChar","1")                        .param("fristAssistTime","10")                        .param("cardWireChar","10")                        .param("secondAssistTime","10")                        .param("groupChar","10")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addNounTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addNounTest result:" + result);    }    @Test    public void updateNounTest() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/updateNounTest")                        .param("cardColorChar","1")                        .param("fristAssistTime","10")                        .param("cardWireChar","10")                        .param("secondAssistTime","10")                        .param("groupChar","10")                        .param("id","10")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====updateNounTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====updateNounTest result:" + result);    }    @Test    public void nounTestDetail() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/nounTestDetail").param("id","19"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====nounTestDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====nounTestDetail result:" + result);    }    @Test    public void deleteNounTest() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/deleteNounTest").param("id","19"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====deleteNounTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====deleteNounTest result:" + result);    }    @Test    public void getNounSenseList() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/getNounSenseList")                        .param("start","1")                        .param("length","10")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====getNounSenseList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====getNounSenseList result:" + result);    }    @Test    public void addNounSense() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addNounSense")                        .param("cardAdjectiveChar","1")                        .param("fristAssistTime","10")                        .param("cardNounChar","10")                        .param("secondAssistTime","10")                        .param("groupChar","10")                        .param("disturbType","10")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addNounSense mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addNounSense result:" + result);    }    @Test    public void deleteNounSense() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/deleteNounSense")                        .param("di","10")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====deleteNounSense mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====deleteNounSense result:" + result);    }    @Test    public void updateNounSense() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/addNounSense")                        .param("cardAdjectiveChar","1")                        .param("fristAssistTime","10")                        .param("cardNounChar","10")                        .param("secondAssistTime","10")                        .param("groupChar","10")                        .param("disturbType","10")                        .param("id","10")                );        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====addNounSense mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====addNounSense result:" + result);    }    @Test    public void nounSenseDetail() throws Exception{        ResultActions resultActions = this.mockMvc.                perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl+"/NounSenseDetail").param("id","10"));        MvcResult mvcResult = resultActions.andReturn();        System.out.println("=====NounSenseDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        System.out.println("=====NounSenseDetail result:" + result);    }    /*@Test    public void deleteSession() throws Exception{    }    @Test    public void checkWebUserLogin() throws Exception{    }    @Test    public void getPageNum() throws Exception{    }    @Test    public void getPageSize() throws Exception{    }    @Test    public void getDraw() throws Exception{    }    @Test    public void setHttpServletResponse() throws Exception{    }    @Test    public void setHttpServletResponse1() throws Exception{    }*/}